{"version":3,"sources":["custimizedHook/LanguageHook.jsx","components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","components/ReactEcharts.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/input/TextInput.jsx","pages/Register.jsx","components/image/LazyImage.jsx","components/makeup/MakeupNav.jsx","utils/stringFilter.js","components/makeup/MakeupItem.jsx","components/makeup/LipsticksList.jsx","pages/Makeups.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","languages/lang.js","store/reducers.js","store/index.js","utils/notification.js","utils/modal.js","auth/auth.js","auth/http.js","index.js"],"names":["useLanguagePageText","locale","useState","pageText","setPageText","useEffect","React","$lang","languageLoader","then","langData","default","connect","state","props","Footer","Layout","className","appFooter","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","OPEN_LOADING","CLOSE_LOADING","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","Group","value","userLanguage","onChange","e","selectedLocaleValue","target","setLang","moment","Button","withRouter","Header","selectedKeys","history","location","pathname","mode","Item","icon","HomeOutlined","exact","to","appHeader","DashboardOutlined","UserOutlined","search","hash","fromDashboard","link","userId","$auth","email","replace","UnorderedListOutlined","HeartOutlined","is_authenticated","activeClassName","onClick","clearUserAuth","logoutMsg","loginLogoutMsg","$notice","success","handleLogOut","ReactEcharts","echarts","GridComponent","LineChart","CanvasRenderer","ToolboxComponent","LegendComponent","PieChart","echartsInstance","echartsDOMElement","option","style","echartObj","getInstanceByDom","init","setOption","dispose","ref","defaultProps","height","width","Dashboard","id","display","flexDirection","xAxis","data","yAxis","series","smooth","legend","top","toolbox","show","feature","mark","dataView","readOnly","restore","saveAsImage","name","radius","center","roseType","itemStyle","borderRadius","usercenterTitle","showBtn","onClickFunction","btnClass","tasks","dispatchDelOneTask","taskId","delOneTask","dispatchChangeTaskFinished","finishedStatus","changeOneFinished","showBtns","setShowBtns","showUpBtns","setShowUpBtns","showDownBtns","setShowDownBtns","handleShowBtn","flag","index","handleShowDelBtn","undefined","handleUpBtns","length","handleDownBtns","item","itemIndex","handleMoveEvent","onMouseOver","onMouseOut","htmlFor","checked","finished","title","tasksBtns","handleItemDelete","dispatchSortItem","diff","moveTask","map","task","dispatchAddOneTask","addOneTask","taskInput","setTaskInput","placeholder","tasksInputPlaceholder","handleInputChange","onKeyDown","keyCode","trim","handleKeyEvent","items","dispatchDelFinishedTasks","dispatchIsAllFinished","isAllFinished","finishedItems","finishedTaskCount","forEach","_calculateFinishedTasks","totalItems","tasksFooter","tasksFooterBtn","Todos","this","dispatchData","status","Component","TextInput","inputTitle","inputType","onBlur","setType","iconStyle","fontSize","position","right","marginTop","boxSizing","color","minWidth","eyeIconDom","EyeInvisibleOutlined","EyeOutlined","password","confirmedPassword","formData","setFormData","errors","setErrors","validateField","errorsObj","JSON","parse","stringify","field","indexOf","re","test","signUpValidateMsg","regArray","testResult","every","k","signUpTitle","signUpInputTitle","formDataObj","handleEmailChange","handlePasswordChange","handleConfirmedPasswordChange","signUpSubmitBtn","setUserAuth","push","signUpNoticeMsg","error","LazyImage","loaded","setLoaded","setError","src","alt","onErrorSrc","loadingSrc","image","Image","handleLoad","handleError","onload","onerror","removeEventListener","join","process","Sider","MakeupNav","useRouteMatch","url","path","defaultSelectedKeys","defaultOpenKeys","capString","strArr","str","toUpperCase","MakeupItem","makeupItem","image_link","brand","category","description","tag_list","product_colors","setDisplay","fName","fBrand","fCategory","fDescription","fTags","productColors","slice","tagElement","tag","makeupDetailElement","substr","makeupColorElement","backgroundColor","hex_value","colour_name","LipsticksList","lipsticks","setLipsticks","$http","getLipSticks","res","lipsticksShortData","catch","err","console","log","lipsticksElement","lipstickItem","windowWidth","window","innerWidth","iElement","iElementLength","Math","floor","i","Content","Makeup","padding","maxWidth","minHeight","component","AppContent","Home","UserCenter","Makeups","Register","loading","antIcon","SmileOutlined","spin","spinning","wrapperClassName","indicator","tip","size","zhCN","enUS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","APP_LANG","Lang","localStorage","getItem","navigator","language","toLowerCase","setItem","_instance","getInstance","defaultState","lang","store","createStore","newState","splice","tempTasks","config","message","duration","_configNotice","notification","info","warning","confirm","Modal","ExclamationCircleOutlined","onOk","onCancel","content","onOK","_configModal","EMAIL","Auth","removeItem","requestCount","showGlobalLoading","hideGlobalLoading","http","axios","create","baseURL","timeout","interceptors","request","use","Promise","reject","response","get","notice","$modal","modal","auth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d9d29fe.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function useLanguagePageText(locale) {\r\n  const [pageText, setPageText] = useState({});\r\n\r\n    // get lang data\r\n  useEffect(()=>{\r\n    // after componentDidMount and componentDidUpdate, we need to get langData file and set page text\r\n    React.$lang.languageLoader().then((langData)=>{\r\n      setPageText(langData.default);\r\n    })\r\n  }, [locale])\r\n\r\n  return pageText;\r\n}","import React from 'react';\r\n\r\n// import from redux\r\nimport {connect} from \"react-redux\";\r\n\r\n// import from antd UI\r\nimport {Layout} from 'antd'\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction AppFooter(props) {\r\n  const { Footer } = Layout;\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  return (\r\n    <>\r\n      <Footer className=\"app-footer\">\r\n        <div className=\"footer-info\">\r\n          {\r\n            !!pageText.appFooter && \r\n            <span><strong>{pageText.appFooter[0]}</strong> seanli9018@gmail.com; <strong>{pageText.appFooter[1] || ''}</strong> 312-825-9982</span>\r\n          }\r\n        </div>\r\n      </Footer>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export component\r\nexport default connect(mapStateToProps, null)(AppFooter);","//1.添加所有的已经存在的任务\r\nexport const ADD_ALL_TASKS = 'add_all_tasks';\r\n//2.添加一条任务\r\nexport const ADD_ONE_TASK = 'add_one_task';\r\n//3.删除一条任务\r\nexport const DEL_ONE_TASK = 'del_one_task';\r\n//4.修改一条任务的完成状态\r\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\r\n//5.修改所有任务的完成状态（全选或全不选）\r\nexport const IS_ALL_FINISHED = 'is_all_finished';\r\n//6.清除所有已完成的任务\r\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\r\n//7.move task item up and down\r\nexport const MOVE_TASK = 'move_task';\r\n//8. Change locale\r\nexport const CHANGE_LOCALE = 'change_locale';\r\n//9. Global loading state - open\r\nexport const OPEN_LOADING = 'open_loading';\r\n//10. Global loading state - close\r\nexport const CLOSE_LOADING = 'close_loading';","import React from 'react';\r\n\r\n//import from antd\r\nimport {  Radio } from 'antd';\r\n\r\nimport moment from \"moment\";\r\nimport {connect} from \"react-redux\";\r\nimport { changeLocale } from \"../store/actionCreators\";\r\n\r\n\r\nfunction LangRadio(props) {\r\n  const { dispatchChangeLocale } = props;\r\n\r\n  let handleLocale = e => {\r\n    let localeValue = {};\r\n    let selectedLocaleValue = e.target.value;\r\n\r\n    // set store locale state\r\n    dispatchChangeLocale(selectedLocaleValue);\r\n\r\n    // set localStorage APP_LANG\r\n    React.$lang.setLang(selectedLocaleValue);\r\n\r\n    if (!localeValue) {\r\n      moment.locale('en');\r\n    } else {\r\n      moment.locale('zh-cn');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"change-locale\">\r\n        <Radio.Group value={!!React.$lang.userLanguage ? React.$lang.userLanguage : 'en'} onChange={handleLocale}>\r\n          <Radio.Button key=\"en\" value='en'>\r\n            English\r\n          </Radio.Button>\r\n          <Radio.Button key=\"cn\" value='zh-cn'>\r\n            中文\r\n          </Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchChangeLocale(localValue){\r\n      const action = changeLocale(localValue);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\r\nimport {\r\n  ADD_ALL_TASKS,\r\n  ADD_ONE_TASK,\r\n  DEL_ONE_TASK,\r\n  CHANGE_ONE_FINISHED,\r\n  IS_ALL_FINISHED,\r\n  DEL_FINISHED_TASKS,\r\n  MOVE_TASK,\r\n  CHANGE_LOCALE, OPEN_LOADING, CLOSE_LOADING\r\n} from \"./actionTypes\";\r\n\r\n//1.添加所有的已经存在的任务\r\nexport const addAllTasks = (tasks)=>{\r\n  return {\r\n    type: ADD_ALL_TASKS,\r\n    tasks\r\n  }\r\n}\r\n//2.添加一条任务\r\nexport const addOneTask = (task)=>{\r\n  return {\r\n    type: ADD_ONE_TASK,\r\n    task\r\n  }\r\n}\r\n//3.删除一条任务\r\nexport const delOneTask = (taskId)=>{\r\n  return {\r\n    type: DEL_ONE_TASK,\r\n    taskId\r\n  }\r\n}\r\n//4.修改一条任务的完成状态\r\nexport const changeOneFinished = (taskId, finishedStatus)=>{\r\n  return {\r\n    type: CHANGE_ONE_FINISHED,\r\n    taskId,\r\n    finishedStatus\r\n  }\r\n}\r\n//5.修改所有任务的完成状态（全选或全部选）\r\nexport const isAllFinished = (flag)=>{\r\n  return {\r\n    type: IS_ALL_FINISHED,\r\n    flag\r\n  }\r\n}\r\n//6.清除所有已完成的任务\r\nexport const delFinishedTasks = ()=>{\r\n  return {\r\n    type: DEL_FINISHED_TASKS,\r\n  }\r\n}\r\n\r\n//7. move task item up and down\r\nexport const moveTask = (index, diff) => {\r\n  return{\r\n    type: MOVE_TASK,\r\n    index,\r\n    diff\r\n  }\r\n}\r\n\r\n//8. handle locale\r\nexport const changeLocale = (localeValue) => {\r\n  return {\r\n    type: CHANGE_LOCALE,\r\n    localeValue\r\n  }\r\n}\r\n\r\n//9. global loading open;\r\nexport const openLoading = () => {\r\n  return {\r\n    type: OPEN_LOADING,\r\n    loading: true\r\n  }\r\n}\r\n\r\n//10. global loading close;\r\nexport const closeLoading = () => {\r\n  return {\r\n    type: CLOSE_LOADING,\r\n    loading: false\r\n  }\r\n}","// import from react\r\nimport React from 'react';\r\n\r\n// import from antd\r\nimport {Layout, Menu} from 'antd'\r\nimport { DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined, HeartOutlined } from \"@ant-design/icons\";\r\n\r\n// import from react-router-dom\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\n// import from redux\r\nimport { connect } from \"react-redux\";\r\n\r\n// import from components\r\nimport LangRadio from \"./LangRadio\";\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction AppHeader(props) {\r\n  const { Header } = Layout;\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  // handle log out btn click event\r\n  function handleLogOut() {\r\n    // clear user auth\r\n    React.$auth.clearUserAuth();\r\n    // redirect to log in page\r\n    props.history.replace('/');\r\n    // show logout successfully modal\r\n    let logoutMsg = pageText.loginLogoutMsg ? pageText.loginLogoutMsg[1] : \"\";\r\n    React.$notice.success(logoutMsg, '', 6);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header \r\n        className=\"app-header\"\r\n      >\r\n        <Menu selectedKeys={[props.history.location.pathname]} mode=\"horizontal\">\r\n          {/*Route Navi*/}\r\n          <Menu.Item key=\"/\" icon={<HomeOutlined />}>\r\n            <NavLink exact to=\"/\">{!!pageText.appHeader ? pageText.appHeader[0] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/dashboard\" icon={<DashboardOutlined />}>\r\n            <NavLink exact to=\"/dashboard\">{!!pageText.appHeader ? pageText.appHeader[1] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/usercenter\" icon={<UserOutlined />}>\r\n            <NavLink exact to={{\r\n              pathname: \"/usercenter\",\r\n              search: \"?name=sean&age=18\",\r\n              hash: \"#hashtag\",\r\n              state: {fromDashboard: true, link: 'google.com', userId: React.$auth.email ? React.$auth.email.replace(/@[\\s\\S]+/, \"\") : \"\"}\r\n            }}>\r\n              {!!pageText.appHeader ? pageText.appHeader[2] : \"\"}\r\n            </NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/tasks\" icon={<UnorderedListOutlined />}>\r\n            <NavLink exact to=\"/tasks\">{!!pageText.appHeader ? pageText.appHeader[3] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/makeups\" icon={<HeartOutlined />}>\r\n            <NavLink to=\"/makeups\">{!!pageText.appHeader ? pageText.appHeader[4] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <div className=\"header-info\">\r\n          {/*if authenticated, show username, else show signup/login btn*/}\r\n          { React.$auth.is_authenticated ?\r\n            <span className=\"header-signup\">\r\n              <NavLink\r\n                exact\r\n                activeClassName=\"link-text-active\"\r\n                to=\"/usercenter\">\r\n                {React.$auth.email.replace(/@[\\s\\S]+/, '')}\r\n              </NavLink>\r\n              <span className=\"header-logout\" onClick={() => handleLogOut()}>Log out</span>\r\n            </span> :\r\n            <span className=\"header-signup\">\r\n              <NavLink\r\n                exact\r\n                activeClassName=\"link-text-active\"\r\n                to=\"/register\">\r\n                {!!pageText.appHeader ? pageText.appHeader[5] : \"\"}\r\n              </NavLink>\r\n            </span>\r\n          }\r\n          <LangRadio />\r\n        </div>\r\n      </Header>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(withRouter(AppHeader));","import React from 'react';\r\n\r\n//import from antd\r\nimport { DatePicker } from \"antd\";\r\n// import { ConfigProvider } from \"antd\";\r\n// import moment from 'moment';\r\n// import 'moment/locale/zh-cn';\r\nimport {connect} from \"react-redux\";\r\n// moment.locale('cn');\r\n\r\n function Home() {\r\n  return (\r\n    <div>\r\n      <DatePicker />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state)=>{\r\n   return {\r\n     locale: state.locale\r\n   }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(Home);","// import from react\r\nimport React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// import from echarts\r\nimport * as echarts from 'echarts/core';\r\nimport {\r\n  GridComponent,\r\n  ToolboxComponent,\r\n  LegendComponent\r\n} from 'echarts/components';\r\nimport {\r\n  LineChart,\r\n  PieChart\r\n} from 'echarts/charts';\r\nimport {\r\n  CanvasRenderer\r\n} from 'echarts/renderers';\r\n\r\nfunction ReactEcharts(props) {\r\n  echarts.use(\r\n    [GridComponent, LineChart, CanvasRenderer, ToolboxComponent,\r\n      LegendComponent, PieChart]\r\n  );\r\n  const echartsInstance = echarts; //echarts object\r\n  let echartsDOMElement = null; //echarts dom\r\n  let { option, style, className } = props // get props\r\n\r\n  // get real dom on didMount\r\n  useEffect(() => {\r\n    //get dom element instance, if no instance then init one\r\n    let echartObj = echartsInstance.getInstanceByDom(echartsDOMElement) ||\r\n      echartsInstance.init(echartsDOMElement);\r\n\r\n    //set echarts option\r\n    echartObj.setOption(option);\r\n\r\n    // Destory the element on WillUnmount\r\n    return function destroyEchartElement() {\r\n      echartObj.dispose();\r\n    }\r\n  }, [option])\r\n\r\n  return (\r\n    <div\r\n      ref={(e) => {echartsDOMElement = e}}\r\n      style={style}\r\n      className={className}\r\n    >Echarts</div>\r\n  )\r\n}\r\n\r\n// specify propTypes for component\r\nReactEcharts.propTypes = {\r\n  option: PropTypes.object.isRequired,\r\n  style: PropTypes.object,\r\n  className: PropTypes.string\r\n}\r\n\r\nReactEcharts.defaultProps = {\r\n  style: {height: \"300px\", width: \"500px\"},\r\n  className: \"\"\r\n}\r\n\r\nexport default ReactEcharts;","import React, {useEffect} from 'react';\r\n\r\n// import components\r\nimport ReactEcharts from \"../components/ReactEcharts\";\r\n\r\n\r\nfunction Dashboard() {\r\n  let option1 = {\r\n    xAxis: {\r\n      type: 'category',\r\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    },\r\n    yAxis: {\r\n      type: 'value'\r\n    },\r\n    series: [{\r\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\r\n      type: 'line',\r\n      smooth: true\r\n    }]\r\n  }\r\n\r\n  let option2 = {\r\n    legend: {\r\n      top: 'bottom'\r\n    },\r\n    toolbox: {\r\n      show: true,\r\n      feature: {\r\n        mark: {show: true},\r\n        dataView: {show: true, readOnly: false},\r\n        restore: {show: true},\r\n        saveAsImage: {show: true}\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Pattern',\r\n        type: 'pie',\r\n        radius: [50, 100],\r\n        center: ['50%', '50%'],\r\n        roseType: 'area',\r\n        itemStyle: {\r\n          borderRadius: 8\r\n        },\r\n        data: [\r\n          {value: 40, name: 'rose 1'},\r\n          {value: 38, name: 'rose 2'},\r\n          {value: 32, name: 'rose 3'},\r\n          {value: 30, name: 'rose 4'},\r\n          {value: 28, name: 'rose 5'},\r\n          {value: 26, name: 'rose 6'},\r\n          {value: 22, name: 'rose 7'},\r\n          {value: 18, name: 'rose 8'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <div id=\"main-container\" style={{display: 'flex', flexDirection: 'row'}}>\r\n      <ReactEcharts option={option1} />\r\n      <ReactEcharts option={option2} style={{\"width\": \"500px\", \"height\": \"350px\"}}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction UserCenter(props) {\r\n  //const query = new URLSearchParams(props.location.search);\r\n  //const userId = props.location.state ? props.location.state.userId : '';\r\n\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{!!pageText.usercenterTitle && pageText.usercenterTitle[0]}</h1>\r\n      {\r\n        !!React.$auth.is_authenticated &&\r\n        <span>{!!pageText.usercenterTitle && pageText.usercenterTitle[1] + React.$auth.email.replace(/@[\\s\\S]+/, \"\")}</span>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(UserCenter);","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Button(props) {\r\n  // get props\r\n  const { showBtn, value, onClickFunction, btnClass }= props;\r\n\r\n  // render virtual element\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"button\"\r\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\r\n        value={value}\r\n        style={{display: showBtn ? \"block\" : \"none\"}}\r\n        onClick={() => onClickFunction()}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nButton.propTypes = {\r\n  showBtn: PropTypes.bool.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  btnClass: PropTypes.string,\r\n  onClickFunction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Button;","// React imports\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\r\n\r\n// components imports\r\nimport Button from './Button';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction Item(props) {\r\n  const [showBtns, setShowBtns] = useState(false);\r\n  const [showUpBtns, setShowUpBtns] = useState(false);\r\n  const [showDownBtns, setShowDownBtns] = useState(false);\r\n  const { locale } = props;\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  //flag is a boolean, flag = onMouseOver ? true : false\r\n  function handleShowDelBtn(flag) {\r\n    setShowBtns(flag);\r\n  }\r\n\r\n  //if index !== 0, then show up btn\r\n  function handleUpBtns(index) {\r\n    if(index !== 0 ){\r\n      setShowUpBtns(true);\r\n    }else{\r\n      setShowUpBtns(false);\r\n    }\r\n  }\r\n\r\n  //if index !== last index, then show down btn\r\n  function handleDownBtns(index) {\r\n    if(index !== tasks.length-1){\r\n      setShowDownBtns(true);\r\n    }else{\r\n      setShowDownBtns(false);\r\n    }\r\n  }\r\n \r\n\r\n  function handleShowBtn(flag, index){\r\n    // Mouse hover ? show : hide\r\n    handleShowDelBtn(flag);\r\n    \r\n    // control Up btn and down btn show/hide\r\n    if(index !== undefined){\r\n      handleUpBtns(index);\r\n      handleDownBtns(index);\r\n    }\r\n  }\r\n\r\n  // finished ? dispatch delete task : prompt confirm modal\r\n  function handleItemDelete(itemId, finshedStatus){\r\n    const { dispatchDelOneTask } = props;\r\n    if(finshedStatus){\r\n      dispatchDelOneTask(itemId);\r\n    }else{\r\n      // prompt Confirm modal\r\n      React.$modal.confirm(()=>{ // Ok clicked\r\n        dispatchDelOneTask(itemId);\r\n      }, ()=>{ // Cancel clicked\r\n        console.log(\"Clicked Cancel\");\r\n      }, \"Do you really want to delete unfinished task?\")\r\n    }\r\n  }\r\n\r\n  const { item, itemIndex, dispatchChangeTaskFinished, handleMoveEvent, tasks } = props;\r\n\r\n  return (\r\n    <li className=\"task-item\"\r\n        onMouseOver={() => handleShowBtn(true, itemIndex)}\r\n        onMouseOut={() => handleShowBtn(false)}\r\n    >\r\n      <label htmlFor={\"item-check-box\"+item.id}>\r\n        <input\r\n          className=\"item-check-box\"\r\n          type=\"checkbox\"\r\n          name=\"item-check-box\"\r\n          id={\"item-check-box\"+item.id}\r\n          checked={item.finished}\r\n          onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\r\n        <span>{item.title}</span>\r\n      </label>\r\n      <div className=\"button-group\">\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[0]:\"\"}\r\n          showBtn={showBtns && showUpBtns}\r\n          onClickFunction={() => handleMoveEvent(itemIndex, -1)}\r\n        />\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[1]:\"\"}\r\n          showBtn={showBtns && showDownBtns}\r\n          onClickFunction={() => handleMoveEvent(itemIndex, 1)}\r\n        />\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[2]:\"\"}\r\n          showBtn={showBtns}\r\n          btnClass=\"delete-btn\"\r\n          onClickFunction={() => this.handleItemDelete(item.id, item.finished)}\r\n        />\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\nItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  handleMoveEvent: PropTypes.func.isRequired,\r\n  itemIndex: PropTypes.number.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchDelOneTask(taskId) {\r\n      // get action object ready\r\n      const action = delOneTask(taskId);\r\n      dispatch(action);\r\n    },\r\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\r\n      // get action object ready\r\n      const action = changeOneFinished(taskId, finishedStatus);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export Item component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\r\n\r\n// import components\r\nimport Item from './Item';\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport { moveTask } from \"../store/actionCreators\";\r\n\r\n\r\n// List component\r\nfunction List(props) {\r\n  // get tasks from props;\r\n  const { tasks, dispatchSortItem } = props;\r\n  return (\r\n    <ul className=\"task-list\">\r\n        {tasks.map((task, index) => (\r\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchSortItem(index, diff){\r\n      const action = moveTask(index, diff);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {useState} from 'react';\r\n\r\n//import react-redux\r\nimport { connect } from 'react-redux';\r\nimport { addOneTask } from '../store/actionCreators';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction TodoHeader(props) {\r\n  const [taskInput, setTaskInput] = useState('');\r\n  const { locale } = props;\r\n\r\n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  function handleInputChange(e) {\r\n    setTaskInput(e.target.value);\r\n  }\r\n\r\n  // handle Enter key down event\r\n  function handleKeyEvent(e) {\r\n    // 0. initial and get all tasks data\r\n    const { tasks } = props;\r\n\r\n    // 1. handle key down event; dispatch input data to store state\r\n    if(e.keyCode === 13 && !! taskInput) {\r\n      // calculate last task's id based on store state length\r\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\r\n\r\n      // organize the newly created task object\r\n      const item = {\r\n        id: lastItemId + 1,\r\n        title: taskInput.trim(),\r\n        finished: false\r\n      }\r\n\r\n      // dispatch new tasks and set store state\r\n      const { dispatchAddOneTask } = props;\r\n      dispatchAddOneTask(item);\r\n\r\n      // clear header input, after successfully add input value\r\n      setTaskInput('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks-header\">\r\n      <input className=\"task-input\"\r\n             type=\"text\"\r\n             placeholder={pageText.tasksInputPlaceholder}\r\n             value={taskInput}\r\n             onChange={(e) => handleInputChange(e)}\r\n             onKeyDown={(e) => handleKeyEvent(e)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  // return newly matched store state to component props\r\n  return {\r\n    tasks: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  // return newly matched store dispatch to component props\r\n  return {\r\n    dispatchAddOneTask(task) {\r\n      // get action object\r\n      const action = addOneTask(task);\r\n      // dispatch to reducer to update store state\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React from 'react';\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\r\n\r\n// import component\r\nimport Button from './Button';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction TodoFooter (props) {\r\n  const { locale } = props;\r\n  \r\n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  // calculate the count of finished tasks\r\n  function _calculateFinishedTasks(tasks) {\r\n    let finishedTaskCount = 0;\r\n\r\n    tasks.forEach((task) => {\r\n      if (task.finished === true) {\r\n        finishedTaskCount += 1;\r\n      }\r\n    })\r\n    return finishedTaskCount\r\n  }\r\n\r\n  const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = props;\r\n  const finishedItems = _calculateFinishedTasks(items);\r\n  const totalItems = items.length;\r\n\r\n  return (\r\n    <div className=\"tasks-footer\">\r\n      <div className=\"tasks-footer-info\">\r\n        <label htmlFor=\"footer-checkbox\"></label>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"footer-checkbox\"\r\n          checked={finishedItems === totalItems && totalItems > 0}\r\n          onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\r\n        />\r\n        {\r\n          !!pageText.tasksFooter && //if pageText.tasksFooter is Not undefined, then we render, otherwise it will thorw a error\r\n          <span className=\"task-info\">\r\n            {pageText.tasksFooter[0]} {finishedItems} {finishedItems===1?pageText.tasksFooter[1]:pageText.tasksFooter[2]} / {finishedItems===1?pageText.tasksFooter[3]:pageText.tasksFooter[4]} {totalItems}\r\n          </span>\r\n        }\r\n      </div>\r\n      {/* <input type=\"button\" className=\"btn\" value={!!pageText && pageText.tasksFooterBtn} onClick={() => dispatchDelFinishedTasks()} /> */}\r\n      <Button showBtn={true} value={pageText.tasksFooterBtn || ''} onClickFunction={() => dispatchDelFinishedTasks()}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props.\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// get dispatch function to set or change the redux state.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchDelFinishedTasks() {\r\n      // get action object ready\r\n      const action = delFinishedTasks();\r\n      dispatch(action);\r\n    },\r\n    dispatchIsAllFinished(flag) {\r\n      // get action object ready\r\n      const action = isAllFinished(flag);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export Item component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\r\n\r\n// Import components\r\nimport List from '../components/List';\r\nimport Header from '../components/TodoHeader';\r\nimport Footer from '../components/TodoFooter';\r\nimport '../index.scss';\r\n\r\n// Import redux and react-redux\r\nimport { connect } from 'react-redux';\r\nimport {addAllTasks} from '../store/actionCreators';\r\n\r\nclass Todos extends React.Component {\r\n  // Did Mount, get data\r\n  componentDidMount() {\r\n    const data = {\r\n      status: 200,\r\n      tasks: [\r\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\r\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\r\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\r\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\r\n      ]\r\n    }\r\n\r\n    //dispatch data to store\r\n    this.props.dispatchData(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='tasks-wrapper'>\r\n        <div className='tasks-container'>\r\n          {/*Header Part - Task Input Box*/}\r\n          <Header />\r\n\r\n          {/*List Part - Task List*/}\r\n          <List />\r\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\r\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\r\n\r\n          {/*Footer Part - Task Control and Delete Btn*/}\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // return newly matched store dispatch to component props\r\n    dispatchData(data){\r\n      // get action\r\n      let action = addAllTasks(data.tasks);\r\n      // dispatch action to reducer to save data as new state\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export default App;\r\nexport default connect(null, mapDispatchToProps)(Todos);\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n//import from antd icon\r\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons'\r\n\r\n\r\nfunction TextInput(props) {\r\n  // get props\r\n  const {inputTitle, inputType, className, value, onChange, onBlur} = props;\r\n\r\n  // store initial props.inputType, the state input type can be set to \"text\"\r\n  const [type, setType] = useState(props.inputType)\r\n\r\n  // icon style object ready to use\r\n  const iconStyle = {\r\n    fontSize: \"14px\",\r\n    position: \"absolute\",\r\n    right: \"0\",\r\n    height: \"30px\",\r\n    marginTop: \"8px\",\r\n    boxSizing: \"border-box\",\r\n    color: \"#ccc\",\r\n    minWidth: \"30px\"\r\n  }\r\n\r\n  // handle eye icon onClick event\r\n  function handleEyeSwitch(){\r\n    if(type === \"password\") {\r\n      setType(\"text\") // if current type === \"password\", then we switch it to \"text\"\r\n    } else {\r\n      setType(\"password\")\r\n    }\r\n  }\r\n\r\n  // prepare eyeIconDom, dynamic render based on input type\r\n  // if input type === password, we render eye invisible icon dom, else we render eye icon dom\r\n  const eyeIconDom = (\r\n    <a onClick={()=>{handleEyeSwitch()}}>\r\n      {type === \"password\" ? <EyeInvisibleOutlined style={iconStyle}/>: <EyeOutlined style={iconStyle} />}\r\n    </a>\r\n  )\r\n\r\n  // render\r\n  return (\r\n    <>\r\n      <div style={{position: \"relative\", marginTop: \"15px\"}}>\r\n        <label htmlFor={inputTitle}>{inputTitle}</label>\r\n        <input\r\n          type={type}\r\n          className={\"text-input \" + (className ? className: \"\")}\r\n          id={inputTitle}\r\n          value={value}\r\n          style={{width: \"100%\"}}\r\n          onChange={(e) => onChange(e)}\r\n          onBlur={(e) => onBlur(e)}\r\n        />\r\n        {/*If props.inputType is password, we render this icon, if the type is text, we do not render any icon*/}\r\n        {inputType===\"password\" ? eyeIconDom : null}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nTextInput.propTypes = {\r\n  inputTitle: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func,\r\n  inputType: PropTypes.string,\r\n  className: PropTypes.string\r\n}\r\n\r\nTextInput.defaultProps = {\r\n  inputType: \"text\"\r\n}\r\n\r\nexport default TextInput;","import React, { useState } from 'react';\r\n\r\n// import redux\r\nimport {connect} from 'react-redux';\r\n\r\n// import component\r\nimport Button from '../components/Button';\r\nimport TextInput from '../components/input/TextInput';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\n\r\nfunction Register(props) {\r\n  // for form data\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmedPassword: \"\"\r\n  })\r\n\r\n  // for form fields validations.\r\n  const [errors, setErrors] = useState({});\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const { locale } = props;\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  // handle email input change function\r\n  function handleEmailChange(e) {\r\n    // deep copy current state data\r\n    let formDataObj = JSON.parse(JSON.stringify(formData));\r\n    // change copied data\r\n    formDataObj.email = e.target.value;\r\n    // setState the changed copy data to state\r\n    setFormData(formDataObj);\r\n  }\r\n\r\n  // handle password input change function\r\n  function handlePasswordChange(e) {\r\n    // deep copy current state data\r\n    let formDataObj = JSON.parse(JSON.stringify(formData));\r\n    // change copied data\r\n    formDataObj.password = e.target.value;\r\n    // setState the changed copy data to state\r\n    setFormData(formDataObj);\r\n  }\r\n\r\n  // handle email input change function\r\n  function handleConfirmedPasswordChange(e) {\r\n    // deep copy current state data\r\n    let formDataObj = JSON.parse(JSON.stringify(formData));\r\n    // change copied data\r\n    formDataObj.confirmedPassword = e.target.value;\r\n    // setState the changed copy data to state\r\n    setFormData(formDataObj);\r\n  }\r\n\r\n  //validate field\r\n  function validateField(...field) {\r\n    // deep copy errors state\r\n    let errorsObj = JSON.parse(JSON.stringify(errors));\r\n\r\n    // email field validate\r\n    if(field.length === 0 || field.indexOf('email') >= 0){\r\n      let re = /^\\w+[\\w-]+@\\w+[\\w-]+(\\.[-\\w]+)+$/;\r\n      if(!formData.email) { // if no email input\r\n        errorsObj.email = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[0] : '';\r\n      }else if (!re.test(formData.email)){ // if there is email and NOT pass the reg test\r\n        errorsObj.email = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[1] : '';\r\n      }else { //if there is email input and pass the reg test\r\n        errorsObj.email = \"\";\r\n      }\r\n    }\r\n\r\n    // password field validate\r\n    if(field.length === 0 || field.indexOf('password') >= 0){\r\n      // password has to be 6-15 in length, no Space\r\n      // password needs to include at least one letter, capital letter, number, and special character.\r\n      let regArray = [/^\\S{6,15}$/, /[A-Z]/, /[a-z]/, /[0-9]/, /[!@#$%^&*)(_\\-=?/<>.,+|~`]/];\r\n      let testResult = regArray.every(e => e.test(formData.password));\r\n      if(!formData.password) { // if no password input\r\n        errorsObj.password = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[2] : '';\r\n      }else if(!testResult){ // if the password NOT pass the reg test.\r\n        errorsObj.password = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[3] : '';\r\n      }else{ //if there is email input\r\n        errorsObj.password = \"\";\r\n      }\r\n    }\r\n\r\n    // confirmed password field validate\r\n    if(field.length === 0 || field.indexOf('confirmedPassword') >= 0){\r\n      if(!formData.confirmedPassword) { // if no confirm password input\r\n        errorsObj.confirmedPassword = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[4] : '';\r\n      } else { //if confirm password looks good\r\n        errorsObj.confirmedPassword = \"\";\r\n      }\r\n    }\r\n\r\n    //matching password and confirm password\r\n    if(field.length === 0 || field.indexOf('matchPassword') >= 0) {\r\n      if (formData.confirmedPassword !== formData.password) { // if not matching\r\n        errorsObj.confirmedPassword = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[5] : '';\r\n      } else { //if confirm password looks good\r\n        errorsObj.confirmedPassword = \"\";\r\n      }\r\n    }\r\n\r\n    // set error state\r\n    setErrors(errorsObj);\r\n\r\n    // once click submit btn, validate errorsObj.\r\n    for (let k in errorsObj) {\r\n      if(!!errorsObj[k]){\r\n        return false; // if there is item in errorsObj: Not pass\r\n      }\r\n    }\r\n    return true; // if there is NO item in errorObj: Passed;\r\n  }\r\n\r\n  // handle form submit\r\n  function onSubmit() {\r\n    // run validate func, it validates all fields when no parameters passing in;\r\n    const validateResult = validateField();\r\n\r\n    // do something once passed or NOT passed.\r\n    if(validateResult){\r\n      React.$auth.setUserAuth(formData.email); // set auth;\r\n      props.history.push('/') // redirect to home page;\r\n      React.$notice.success(pageText.signUpNoticeMsg[0],\r\n        pageText.signUpNoticeMsg[1], 6)\r\n    }else{\r\n      React.$notice.error(pageText.signUpNoticeMsg[2],\r\n        pageText.signUpNoticeMsg[3], 6)\r\n    }\r\n  }\r\n\r\n  // render virtual element\r\n  return (\r\n    <div className=\"register-wrapper\">\r\n      <div className=\"register-container\">\r\n        <div>\r\n          <h3>{pageText.signUpTitle || \"\"}</h3>\r\n        </div>\r\n        <form className=\"general-form\">\r\n          <TextInput\r\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[0] : \"\"}\r\n            value={formData.email}\r\n            onChange={(e) => handleEmailChange(e)}\r\n            onBlur={() => validateField(\"email\")}\r\n          />\r\n          <span className=\"input-error\">{errors.email || \"\"}</span>\r\n          <TextInput\r\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[1] : \"\"}\r\n            value={formData.password}\r\n            inputType=\"password\"\r\n            onChange={(e) => handlePasswordChange(e)}\r\n            onBlur={() => validateField(\"password\", \"matchPassword\")}\r\n          />\r\n          <span className=\"input-error\">{errors.password || \"\"}</span>\r\n          <TextInput\r\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[2] : \"\"}\r\n            value={formData.confirmedPassword}\r\n            inputType=\"password\"\r\n            onChange={(e) => handleConfirmedPasswordChange(e)}\r\n            onBlur={() => validateField(\"confirmedPassword\", \"matchPassword\")}\r\n          />\r\n          <span className=\"input-error\">{errors.confirmedPassword || \"\"}</span>\r\n          <Button showBtn={true} btnClass=\"sign-up-btn\" value={pageText.signUpSubmitBtn || \"\"} onClickFunction={() => onSubmit()}/>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export component\r\nexport default connect(mapStateToProps, null)(Register);","//import react\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n//import props limitation\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction LazyImage(props) {\r\n  // init state: image loading status\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  //prepare props\r\n  const { src, alt, className, onErrorSrc, loadingSrc } = props;\r\n\r\n  // load image once DOM mounted\r\n  useEffect(() => {\r\n    const image = new Image();\r\n    // handle load and error;\r\n    const handleLoad = () => {\r\n      setLoaded(true);\r\n    }\r\n    const handleError = () => {\r\n      setError(true);\r\n    }\r\n\r\n    image.onload = handleLoad;\r\n    image.onerror = handleError;\r\n\r\n    // assign the src from props to image;\r\n    image.src = src;\r\n\r\n    return ()=>{\r\n      image.removeEventListener('load', handleLoad);\r\n      image.removeEventListener('error', handleError);\r\n    }\r\n  }, [props.src])\r\n\r\n\r\n  return (\r\n    <img\r\n      className={className}\r\n      src={error ? onErrorSrc : !loaded ? loadingSrc : src}\r\n      alt={alt.join(\" \")}\r\n    />\r\n  )\r\n\r\n}\r\n\r\n// default props\r\nLazyImage.defaultProps = {\r\n  src: '',\r\n  alt: 'images',\r\n  onErrorSrc: process.env.PUBLIC_URL + '/handleimage/image-not-found.jpg',\r\n  loadingSrc: process.env.PUBLIC_URL + '/handleimage/image-loading.jpg',\r\n  className: 'img'\r\n}\r\n\r\n// prop types\r\nLazyImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.array,\r\n  onErrorSrc: PropTypes.string,\r\n  loadingSrc: PropTypes.string,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default LazyImage;","// import react\r\nimport React from 'react';\r\n\r\n// import from antd\r\nimport { Layout, Menu } from \"antd\";\r\n// import from react-router\r\nimport {NavLink, useRouteMatch} from \"react-router-dom\";\r\n// import component\r\nimport LazyImage from \"../image/LazyImage\";\r\n\r\n\r\n\r\nconst { Sider } = Layout;\r\n\r\nfunction MakeupNav (props) {\r\n  let { path, url } = useRouteMatch();\r\n  return (\r\n    <div className=\"makeup-nav-wrapper\">\r\n      <Sider className=\"site-layout-background\" width={200}>\r\n        <Menu\r\n          mode=\"inline\"\r\n          defaultSelectedKeys={['1']}\r\n          defaultOpenKeys={['sub1']}\r\n          style={{ height: '100%' }}\r\n        >\r\n          <Menu.Item key=\"Blush\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/blush-ff7992c3d7690d18a9b0224177cfbdedbc036497cf87c393ec01c6a2ef070258.svg\"\r\n              alt={[\"Blush\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Blush\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Bronzer\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/bronzer-2d423487eea3e4571229bd95689bb4eb4331f05740f3921ede7c7c765c7954b1.svg\"\r\n              alt={[\"Bronzer\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Bronzer\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Eyebrow\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/eyebrow-fc49d8d480ace717203a21fe863c2231970063add91ed2f15181fe8e2d3b96b9.svg\"\r\n              alt={[\"Eyebrow\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Eyebrow\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Eyeliner\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/eyeliner-de329b6d65d721a45190051af1153e23202df9eb1c393d1ac65972376ee42d50.svg\"\r\n              alt={[\"Eyeliner\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Eyeliner\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Eyeshadow\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/eyeshadow-67f9f8fd19df1862c95122f9b3460c7e6674d5a6d178cde00e6e4be908dd898a.svg\"\r\n              alt={[\"Eyeshadow\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Eyeshadow\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Foundation\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/foundation-9985c8a404d4a19cf7a2985ed504958cadd9f71252a73c90b6a7178bf7075143.svg\"\r\n              alt={[\"Foundation\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Foundation\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Lip Liner\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/lip_liner-3f40bb63957aa7d47e3a2d1356b9380aa093271e5d58f3518181fd427e388d93.svg\"\r\n              alt={[\"Lip\", \"Liner\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Lip Liner\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Lipstick\">\r\n            <NavLink to={`${url}/lipsticks`}>\r\n              <LazyImage\r\n                src=\"http://makeup-api.herokuapp.com/assets/lipstick-4531b48ee71839393857e24c8cbc4dede1f99d2284ef82a6eb0a2a4d03540a14.svg\"\r\n                alt={[\"Lipstick\", \"product\"]}\r\n                className=\"makeup-nav-icon\"\r\n              />\r\n              Lipstick\r\n            </NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Mascara\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/mascara-0deeeb81e58f31ddbff07847bfd0820e5ecdba1419f4281da743a05e0d6b3e69.svg\"\r\n              alt={[\"Mascara\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Mascara\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Nail Polish\">\r\n            <LazyImage\r\n              src=\"http://makeup-api.herokuapp.com/assets/nail_polish-a7e7204834c0c30e8b57a1ba9896656331e228b0daa09d1705d1ab29bc0b7151.svg\"\r\n              alt={[\"Nail\", \"Polish\", \"product\"]}\r\n              className=\"makeup-nav-icon\"\r\n            />\r\n            Nail Polish\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MakeupNav;","// Capitalization String - first letter capitalized\r\nexport function capString(strArr) {\r\n  if(strArr.length > 0) {\r\n    return strArr.map(str => {\r\n      // if str is existed, then return uppercase str\r\n      return str && str.replace(str[0], str[0].toUpperCase());\r\n    })\r\n  }\r\n  return null;\r\n}\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n//import utils string filters\r\nimport { capString } from '../../utils/stringFilter';\r\n\r\n// import component\r\nimport LazyImage from '../image/LazyImage'\r\n\r\nfunction MakeupItem(props) {\r\n  // get props\r\n  const { name, image_link, brand, category, description, tag_list, product_colors } = props.makeupItem;\r\n\r\n  // init state\r\n  const [display, setDisplay] = useState(false)\r\n\r\n  //prepare data string using capString filter\r\n  let strArr = [name, brand, category, description];\r\n  const [fName, fBrand, fCategory, fDescription] = capString(strArr);\r\n  let tagArr = [...tag_list];\r\n  const fTags = capString(tagArr);\r\n\r\n  //prepare color circle data\r\n  let productColors = product_colors.slice(0, 10);\r\n\r\n  //prepare makeup tag element\r\n  const tagElement = fTags && fTags.map(tag => {\r\n    return <span className=\"makeup-tag makeup-light-text\" key={tag}>{tag}</span>\r\n  })\r\n\r\n  //prepare makeup detailed info element\r\n  const makeupDetailElement =\r\n    <div className=\"makeup-details\">\r\n      <span className=\"makeup-title\">{fName}</span>\r\n      <div className=\"makeup-tags\">\r\n        {tagElement}\r\n      </div>\r\n      <span className=\"makeup-length makeup-light-text\">{fDescription.length>=120?fDescription.substr(0, 120) + \"...\" : fDescription}</span>\r\n    </div>\r\n\r\n  //prepare makeup color circles element\r\n  const makeupColorElement =\r\n    <div className=\"makeup-colors\">\r\n      {productColors.map(color => {\r\n        return <div className=\"makeup-color\" key={color.colour_name} style={{backgroundColor: color.hex_value}}></div>\r\n      })}\r\n    </div>\r\n\r\n  // render\r\n  return (\r\n    <>\r\n      {\r\n        !!props.makeupItem &&\r\n        <li className=\"makeup-item\">\r\n          {/* makeup image element */}\r\n          <LazyImage src={image_link} alt={[fBrand,fCategory, fName]} className=\"makeup-image\"/>\r\n          {/* Makeup detail info */}\r\n          {display && makeupDetailElement}\r\n          {/* Makeup bar info */}\r\n          <div className=\"makeup-info\">\r\n            <span className=\"makeup-title\">{fName}</span>\r\n            <span className=\"makeup-light-text makeup-type\">{fBrand}</span>\r\n            {/* Makeup color element */}\r\n            {makeupColorElement}\r\n          </div>\r\n          {/* Hover cover div */}\r\n          <div\r\n            className=\"makeup-item-cover\"\r\n            onMouseOver={() => setDisplay(true)}\r\n            onMouseOut={() => setDisplay(false)}\r\n          >\r\n          </div>\r\n        </li>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nMakeupItem.propTypes = {\r\n  makeupItem: PropTypes.object.isRequired\r\n}\r\n\r\nMakeupItem.defaultProps = {\r\n}\r\n\r\nexport default MakeupItem;","// import react\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n// import antd icon\r\nimport {HeartOutlined} from \"@ant-design/icons\";\r\n\r\n// import components\r\nimport MakeupItem from \"./MakeupItem\";\r\n\r\nfunction LipsticksList(props) {\r\n  // init lipsticks state\r\n  const [lipsticks, setLipsticks] = useState([])\r\n\r\n  // fetch lipsticks data, and set state\r\n  useEffect(() => {\r\n    React.$http.getLipSticks().then(res => {\r\n      let lipsticksShortData = res.data.slice(0, 11);\r\n      setLipsticks(lipsticksShortData);\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }, [])\r\n\r\n  // prepare lipsticks elements\r\n  const lipsticksElement = lipsticks && lipsticks.map(lipstickItem => {\r\n    return <MakeupItem key={lipstickItem.id} makeupItem={lipstickItem} />\r\n  })\r\n\r\n  // prepare blank item\r\n  const windowWidth = window.innerWidth;\r\n  let iElement = [];\r\n  const iElementLength =  Math.floor(windowWidth / 206);\r\n  for(let i=0; i<iElementLength; i++) {\r\n    iElement.push(<i key={i}></i>)\r\n  }\r\n  return (\r\n    <div className=\"makeup-wrapper\">\r\n      <h3><HeartOutlined /> Lipsticks </h3>\r\n      <ul className=\"makeup-list\">\r\n        {lipsticksElement}\r\n        {/* for filling the gap of flex */}\r\n        {iElement}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LipsticksList;","import React from 'react';\r\n\r\n// import from antd\r\nimport { Layout, Menu } from \"antd\";\r\n\r\n// import react router\r\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\r\n\r\n// import components\r\nimport MakeupNav from '../components/makeup/MakeupNav';\r\nimport LazyImage from '../components/image/LazyImage';\r\nimport LipsticksList from '../components/makeup/LipsticksList';\r\n\r\n\r\nconst { Content } = Layout;\r\n\r\nfunction Makeup(props) {\r\n  let { path, url } = useRouteMatch();\r\n\r\n  // render\r\n  return (\r\n    <div>\r\n      <h1>Makeups</h1>\r\n      <div className=\"image-grid\">\r\n        <div className=\"photo\">\r\n          <LazyImage\r\n            src=\"http://makeup-api.herokuapp.com/assets/brushes-6d2ab84631ecd47ced4fa07c47eb37521eb61c5a525965dafaf308f21338aa44.png\"\r\n            alt={[\"Brushes\"]}\r\n          />\r\n        </div>\r\n        <div className=\"photo photo-lips\">\r\n          <LazyImage\r\n            src=\"http://makeup-api.herokuapp.com/assets/lips-c35ec4a3350ec779c6bf6a785981ad9ef2e21bd9fe26a2be1c766d56edb2e11f.png\"\r\n            alt={[\"Lips\"]}\r\n          />\r\n        </div>\r\n        <div className=\"photo\">\r\n          <LazyImage\r\n            src=\"http://makeup-api.herokuapp.com/assets/nail-polish-4c7ee1a5f7a5cbaff9757c3bcfa4f6e89d7a6f2ffc49d267e04e010ba94cfd7c.png\"\r\n            alt={[\"Nail\", \"polish\"]}\r\n          />\r\n        </div>\r\n        <div className=\"photo\">\r\n          <LazyImage\r\n            src=\"http://makeup-api.herokuapp.com/assets/single-pot-4ce398e7d8c527ef248ace7a783cc52fd583375a25a7dcdb7b16f7a0958ccb17.png\"\r\n            alt={[\"Single\", \"pot\"]}\r\n          />\r\n        </div>\r\n        <div className=\"photo\">\r\n          <LazyImage\r\n            src=\"http://makeup-api.herokuapp.com/assets/eyeshadow-18fa4bed267bec6a67506150d9574259d0dcc67700e69de4ba720d9afe8204a2.png\"\r\n            alt={[\"Eyeshadow\"]}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Layout className=\"makeup-layout-background\" style={{ padding: \"24px 0\", maxWidth: \"1200px\" }}>\r\n        {/* makeup page nav side bar component*/}\r\n        <MakeupNav />\r\n        {/* makeup page content component*/}\r\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n          {/*Route View/output */}\r\n          <Switch>\r\n            <Route exact path={path} component={LipsticksList} />\r\n            <Route path={`${path}/lipsticks`} component={LipsticksList} />\r\n            <Route path=\"/makeups/lipsticks\" component={LipsticksList} />\r\n          </Switch>\r\n        </Content>\r\n      </Layout>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n// export List component\r\nexport default Makeup;","import React from 'react';\r\nimport { Layout } from 'antd'\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\nimport Home from '../pages/Home';\r\nimport Dashboard from '../pages/Dashboard';\r\nimport UserCenter from '../pages/UserCenter';\r\nimport Todos from '../pages/Todos';\r\nimport Register from '../pages/Register';\r\nimport Makeups from '../pages/Makeups';\r\n\r\nfunction AppContent() {\r\n  const { Content } = Layout;\r\n  return (\r\n    <>\r\n      <Content className=\"app-content\">\r\n        {/*Route View/output */}\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/dashboard\" component={Dashboard} />\r\n          <Route exact path=\"/usercenter\" component={UserCenter} />\r\n          <Route exact path=\"/tasks\" component={Todos} />\r\n          <Route exact path=\"/makeups\" component={Makeups} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n        </Switch>\r\n      </Content>\r\n    </>\r\n  )\r\n}\r\nexport default AppContent;","//import react\r\nimport React from 'react';\r\n\r\n//import react-router-dom\r\nimport { HashRouter as Router } from \"react-router-dom\"\r\n\r\n// import from react redux\r\nimport {connect} from \"react-redux\";\r\n\r\n//import antd\r\nimport { Layout, ConfigProvider, Spin } from 'antd';\r\nimport moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\nimport enUS from 'antd/lib/locale/en_US';\r\nimport zhCN from 'antd/lib/locale/zh_CN';\r\nimport { SmileOutlined } from '@ant-design/icons';\r\n\r\n//import page components\r\nimport AppFooter from './components/AppFooter';\r\nimport AppHeader from './components/AppHeader';\r\nimport AppContent from \"./components/AppContent\";\r\n\r\nmoment.locale('cn');\r\n\r\n// app file\r\nfunction App(props) {\r\n  const { locale } = props;\r\n  console.log(\"Thank you for checking my code! Please contact me via email 'seanli9018@gmail.com' if you are hiring passionate web developer!!!\")\r\n\r\n  const antIcon = <SmileOutlined style={{ fontSize: 30 }} spin />;\r\n  return (\r\n    <Spin spinning={props.loading} wrapperClassName=\"global-loading\" indicator={antIcon} tip=\"Working hard to get things you want!\" size=\"large\">\r\n      {/*ConfigProvider is for antdesign UI to pass language objects globally.*/}\r\n      <ConfigProvider locale={locale==='zh-cn' ? zhCN : enUS}>\r\n        <Router>\r\n          <Layout>\r\n            <AppHeader />\r\n            <AppContent />\r\n            <AppFooter />\r\n          </Layout>\r\n        </Router>\r\n      </ConfigProvider>\r\n    </Spin>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n  return {\r\n    locale: state.locale,\r\n    loading: state.loading\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const APP_LANG = 'APP_LANG'\r\n\r\nclass Lang {\r\n  constructor() {\r\n    //init lang\r\n    this.userLanguage = '';\r\n\r\n    //in constructor, we need to get existing APP_LANG from localStorage\r\n    this.userLanguage = localStorage.getItem(APP_LANG);\r\n\r\n    // if there is no APP_LANG in localStorage, we set lang based on browser preference.\r\n    if(!this.userLanguage){\r\n      const userLang = window.navigator.language.toLowerCase() || 'en'; //get browser language preference\r\n      if(userLang === 'zh-cn') {\r\n        this.userLanguage = 'zh-cn'\r\n        localStorage.setItem(APP_LANG, this.userLanguage);\r\n      } else {\r\n        this.userLanguage = 'en'\r\n        localStorage.setItem(APP_LANG, this.userLanguage);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getInstance(){\r\n    if(!this._instance){\r\n      this._instance = new Lang();\r\n    }\r\n    return this._instance\r\n  }\r\n\r\n  // set localStorage APP_LANG\r\n  setLang(language) {\r\n    this.userLanguage = language.toLowerCase();\r\n    localStorage.setItem(APP_LANG, this.userLanguage);\r\n  }\r\n\r\n  // when call this function, will dynamically import matching language JSON file.\r\n  languageLoader() {\r\n    switch (this.userLanguage.toLowerCase()) {\r\n      case 'zh-cn':\r\n        return import('../languages/zhcn.json');\r\n      case 'en-us':\r\n        return import('../languages/enus.json');\r\n      default:\r\n        return import('../languages/enus.json');\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Lang.getInstance();\r\n","// 1. import actionTypes\r\nimport {\r\n  ADD_ALL_TASKS,\r\n  ADD_ONE_TASK,\r\n  DEL_ONE_TASK,\r\n  CHANGE_ONE_FINISHED,\r\n  IS_ALL_FINISHED,\r\n  DEL_FINISHED_TASKS,\r\n  MOVE_TASK,\r\n  CHANGE_LOCALE,\r\n  OPEN_LOADING,\r\n  CLOSE_LOADING\r\n} from \"./actionTypes\";\r\n\r\n//1.1 import language instance\r\nimport lang from '../languages/lang';\r\n\r\n// 2. reducer: create default state\r\nconst defaultState = {\r\n  tasks: [],\r\n  locale: lang.userLanguage,\r\n  loading: false\r\n}\r\n\r\n// 3. reducer: core methods based on action type\r\nexport default function taskReducer(state=defaultState, action){\r\n  // 1.0 get all existing tasks from database\r\n  if(action.type === ADD_ALL_TASKS) {\r\n    // 1.1 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    // 1.2 passing actions data to the newState\r\n    newState.tasks = action.tasks;\r\n    return newState;\r\n  }\r\n  //2.add a new task\r\n  if(action.type === ADD_ONE_TASK) {\r\n    //2.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const task = action.task\r\n    //2.1 push actions task data to the newState\r\n    tasks.push(task);\r\n    //2.2 set new state\r\n    return newState;\r\n  }\r\n  //3.delete one task\r\n  if(action.type === DEL_ONE_TASK) {\r\n    //3.0. clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const taskId = action.taskId;\r\n    const tasks = newState.tasks;\r\n    //3.1. use map loop, match task ID and return a new tempTasks array\r\n    tasks.forEach((task, index) => {\r\n      if(task.id === taskId) {\r\n        tasks.splice(index, 1);\r\n      }\r\n    })\r\n    //3.2. Assign new tasks array to newState\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //4.change one task's finished status\r\n  if(action.type === CHANGE_ONE_FINISHED) {\r\n    //4.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const taskId = action.taskId;\r\n    const finishedStatus = action.finishedStatus;\r\n\r\n    //4.1. use loop match the task item and change it's finished status\r\n    tasks.forEach((task) => {\r\n      if(task.id === taskId) {\r\n        task.finished = finishedStatus;\r\n      }\r\n    })\r\n\r\n    //4.2. Assign new tempTasks array to new state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //5.change all tasks finished status (select all and de-select all)\r\n  if(action.type === IS_ALL_FINISHED) {\r\n    //5.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const flag = action.flag;\r\n\r\n    //5.1 According to flag, select/de-select all tasks\r\n    tasks.forEach((task) => {\r\n      if(flag){\r\n        task.finished = true;\r\n      } else {\r\n        task.finished = false;\r\n      }\r\n    })\r\n\r\n    //5.2 Assign new tempTasks array to new state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //6.clean all finished tasks\r\n  if(action.type === DEL_FINISHED_TASKS) {\r\n    //6.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const tempTasks = [];\r\n\r\n    //6.1 push all unfinished task to new Array\r\n    tasks.forEach((task) => {\r\n      if(!task.finished){\r\n        tempTasks.push(task);\r\n      }\r\n    })\r\n\r\n    //6.2 set State and re-rendering\r\n    newState.tasks = tempTasks;\r\n    return newState;\r\n  }\r\n  //7. move task item up and down\r\n  if(action.type === MOVE_TASK) {\r\n    //7.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const index = action.index;\r\n    const diff = action.diff;\r\n\r\n    //7.1 handle item sorting\r\n    const item = tasks[index];\r\n    tasks.splice(index, 1);\r\n    tasks.splice(index + diff, 0, item);\r\n\r\n    //7.2 set state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //8. Change locale\r\n  if(action.type === CHANGE_LOCALE) {\r\n    // 8.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const localeValue = action.localeValue;\r\n\r\n    // 8.1 handle change locale\r\n    newState.locale = localeValue;\r\n\r\n    // 8.2 set state\r\n    return newState\r\n  }\r\n  //9. global loading open;\r\n  if(action.type === OPEN_LOADING) {\r\n    // 9.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const loading = action.loading;\r\n\r\n    // 9.1 handle change loading status to true\r\n    newState.loading = loading;\r\n\r\n    // 9.2 set state\r\n    return newState\r\n  }\r\n  //10. global loading close;\r\n  if(action.type === CLOSE_LOADING) {\r\n    // 10.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const loading = action.loading;\r\n\r\n    // 8.1 handle change loading status to false\r\n    newState.loading = loading;\r\n\r\n    // 8.2 set state\r\n    return newState\r\n  }\r\n  return state;\r\n}\r\n\r\n\r\n","import { createStore }  from 'redux';\r\nimport reducers from './reducers'\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import { notification } from 'antd';\r\n\r\nclass AppNotification {\r\n    constructor(){\r\n        this.config = {}\r\n    }\r\n\r\n    _configNotice(message, description, duration){\r\n        this.config.message = message;\r\n        this.config.description = description;\r\n        this.config.duration = duration;\r\n    }\r\n\r\n    success(message=\"Notice\", description=\"Successfully operated\", duration=3) {\r\n        this._configNotice(message, description, duration);\r\n        notification.success(this.config)\r\n    }\r\n\r\n    info(message=\"Notice\", description=\"Infomation\", duration=3) {\r\n        this._configNotice(message, description, duration);\r\n        notification.info(this.config)\r\n    }\r\n\r\n    warning(message=\"Warning\", description=\"Warning message\", duration=5) {\r\n        this._configNotice(message, description, duration);\r\n        notification.warning(this.config)\r\n    }\r\n\r\n    error(message=\"Error\", description=\"Operation failed\", duration=5) {\r\n        this._configNotice(message, description, duration);\r\n        notification.error(this.config)\r\n    }\r\n}\r\n\r\nexport default new AppNotification();","import { Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nclass AppModal {\r\n    constructor(){\r\n        this.config = {\r\n            icon: <ExclamationCircleOutlined />\r\n        }\r\n    }\r\n\r\n    _configModal(onOk, onCancel, title, content){\r\n        this.config.onOk = onOk;\r\n        this.config.onCancel = onCancel;\r\n        this.config.title = title;\r\n        this.config.content = content;\r\n    }\r\n\r\n    confirm(onOK, onCancel, title=\"Do you want to delete this item?\", content=\"Click Yes or Cancel\") {\r\n        this._configModal(onOK, onCancel, title, content, );\r\n        confirm(this.config);\r\n    }\r\n}\r\n\r\nexport default new AppModal();","const EMAIL = 'EMAIL';\r\n\r\nclass Auth{\r\n  constructor() {\r\n    // initiate email\r\n    this.email = ''\r\n\r\n    //get email from local storage.\r\n    this.email = localStorage.getItem(EMAIL);\r\n  }\r\n\r\n  // achieve single instance\r\n  static getInstance(){\r\n    if(!this._instance){\r\n      this._instance = new Auth();\r\n    }\r\n    return this._instance;\r\n  }\r\n\r\n  // set auth email\r\n  setUserAuth(email){\r\n    this.email = email;\r\n    // then set new user auth email\r\n    localStorage.setItem(EMAIL, email);\r\n  }\r\n\r\n  // log out clear auth email\r\n  clearUserAuth(){\r\n    // clear this.email\r\n    this.email = '';\r\n    // clear localStorage\r\n    localStorage.removeItem(EMAIL);\r\n  }\r\n\r\n  // check if a user is logged in and authenticated\r\n  get is_authenticated() {\r\n    if(this.email) {\r\n      return true;\r\n    }else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Auth.getInstance();","// import axios xmlhttprequest package;\r\nimport axios from 'axios';\r\n\r\n// import actions to handle global loading effects\r\nimport {openLoading, closeLoading} from \"../store/actionCreators\";\r\n\r\n// import store for dispatching above actions\r\nimport store from \"../store/index\"\r\n\r\n// func for calculator current api request count which decides open/close loading effects\r\nlet requestCount = 0;\r\n\r\nfunction showGlobalLoading() {\r\n  if(requestCount === 0) { //if there is no previous requests, show loading\r\n    store.dispatch(openLoading())\r\n  }\r\n  requestCount ++; //increment 1 request count\r\n}\r\n\r\nfunction hideGlobalLoading() {\r\n  if(requestCount <= 1) { // if this is the last request, we hide loading;\r\n    store.dispatch(closeLoading());\r\n  }\r\n  requestCount --; // we decrease 1 request count\r\n}\r\n\r\n// the cors-anywhere is prefix is for compatibale with github pages https to send request to http api;\r\nconst BASE_URL = ' https://cors-anywhere.herokuapp.com/http://makeup-api.herokuapp.com/api/v1/products.json';\r\n\r\nclass Http {\r\n  constructor() {\r\n    this.http = axios.create({\r\n      baseURL: BASE_URL,\r\n      timeout: 20000\r\n    })\r\n\r\n    // Add a request interceptor\r\n    this.http.interceptors.request.use(config => {\r\n      // set store.loading to true, start global page loading effects.\r\n      showGlobalLoading();\r\n      return config;\r\n    }, error => {\r\n      // Do something with request error\r\n      hideGlobalLoading();\r\n      return Promise.reject(error);\r\n    })\r\n\r\n    // Add a response interceptor\r\n    this.http.interceptors.response.use(response => {\r\n      // Any status code that lie within the range of 2xx cause this function to trigger\r\n      hideGlobalLoading();\r\n      // Do something with response data\r\n      return response;\r\n    }, error => {\r\n      // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n      hideGlobalLoading();\r\n      // Do something with response error\r\n      return Promise.reject(error);\r\n    })\r\n  }\r\n\r\n  getLipSticks() {\r\n    const url = '?product_type=lipstick';\r\n    return this.http.get(url);\r\n  }\r\n\r\n  // getMovieDetails(movieId) {\r\n  //   const url = '/title/get-details?tconst=' + movieId;\r\n  //   return this.http.get(url);\r\n  // }\r\n}\r\n\r\nexport default new Http();\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// import Redux react-redux;\r\nimport { Provider } from 'react-redux';\r\nimport store from '../src/store/index';\r\n\r\nimport notice from '../src/utils/notification';\r\nimport modal from '../src/utils/modal';\r\nimport lang from '../src/languages/lang';\r\nimport auth from '../src/auth/auth';\r\nimport http from '../src/auth/http';\r\n\r\n// React.$notification = (message) => {\r\n//   console.log(message);\r\n//   notification.success({message: message});\r\n// }\r\n\r\n// bind notice class instance to React globally\r\nReact.$notice = notice;\r\n//bind modal class instance to React globally\r\nReact.$modal = modal;\r\n// bind lang class to React globally\r\nReact.$lang = lang;\r\n// bind frontend auth\r\nReact.$auth = auth;\r\n// bind http.js to send xmlhttprequest to API\r\nReact.$http = http;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}