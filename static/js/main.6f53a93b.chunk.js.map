{"version":3,"sources":["custimizedHook/LanguageHook.jsx","components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","components/ReactEcharts.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/input/TextInput.jsx","pages/Register.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","languages/lang.js","store/reducers.js","store/index.js","utils/notification.js","utils/modal.js","index.js"],"names":["useLanguagePageText","locale","useState","pageText","setPageText","useEffect","React","$lang","languageLoader","then","langData","default","connect","state","props","Footer","Layout","className","appFooter","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","Group","value","userLanguage","onChange","e","selectedLocaleValue","target","setLang","moment","Button","withRouter","Header","selectedKeys","history","location","pathname","mode","Item","icon","HomeOutlined","exact","to","appHeader","DashboardOutlined","UserOutlined","search","hash","fromDashboard","link","userId","UnorderedListOutlined","activeClassName","ReactEcharts","echarts","GridComponent","LineChart","CanvasRenderer","ToolboxComponent","LegendComponent","PieChart","echartsInstance","echartsDOMElement","option","style","echartObj","getInstanceByDom","init","setOption","dispose","ref","defaultProps","height","width","Dashboard","id","display","flexDirection","xAxis","data","yAxis","series","smooth","legend","top","toolbox","show","feature","mark","dataView","readOnly","restore","saveAsImage","name","radius","center","roseType","itemStyle","borderRadius","query","URLSearchParams","console","log","get","usercenterTitle","showBtn","onClickFunction","btnClass","onClick","tasks","dispatchDelOneTask","taskId","delOneTask","dispatchChangeTaskFinished","finishedStatus","changeOneFinished","showBtns","setShowBtns","showUpBtns","setShowUpBtns","showDownBtns","setShowDownBtns","handleShowBtn","flag","index","handleShowDelBtn","undefined","handleUpBtns","length","handleDownBtns","item","itemIndex","handleMoveEvent","onMouseOver","onMouseOut","htmlFor","checked","finished","title","tasksBtns","handleItemDelete","dispatchSortItem","diff","moveTask","map","task","dispatchAddOneTask","addOneTask","taskInput","setTaskInput","placeholder","tasksInputPlaceholder","handleInputChange","onKeyDown","keyCode","trim","handleKeyEvent","items","dispatchDelFinishedTasks","dispatchIsAllFinished","isAllFinished","finishedItems","finishedTaskCount","forEach","_calculateFinishedTasks","totalItems","tasksFooter","tasksFooterBtn","Todos","this","dispatchData","status","Component","TextInput","inputTitle","inputType","setValue","setType","iconStyle","fontSize","position","right","marginTop","boxSizing","color","minWidth","eyeIconDom","EyeInvisibleOutlined","EyeOutlined","Register","alert","AppContent","Content","path","component","Home","UserCenter","zhCN","enUS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","APP_LANG","Lang","localStorage","getItem","window","navigator","language","toLowerCase","setItem","_instance","getInstance","defaultState","lang","store","createStore","newState","JSON","parse","stringify","push","splice","tempTasks","config","message","description","duration","_configNotice","notification","success","info","warning","error","confirm","Modal","ExclamationCircleOutlined","onOk","onCancel","content","onOK","_configModal","$notice","notice","$modal","modal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f53a93b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function useLanguagePageText(locale) {\r\n  const [pageText, setPageText] = useState({});\r\n\r\n    // get lang data\r\n  useEffect(()=>{\r\n    // after componentDidMount and componentDidUpdate, we need to get langData file and set page text\r\n    React.$lang.languageLoader().then((langData)=>{\r\n      setPageText(langData.default);\r\n    })\r\n  }, [locale])\r\n\r\n  return pageText;\r\n}","import React from 'react';\r\n\r\n// import from redux\r\nimport {connect} from \"react-redux\";\r\n\r\n// import from antd UI\r\nimport {Layout} from 'antd'\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction AppFooter(props) {\r\n  const { Footer } = Layout;\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  return (\r\n    <>\r\n      <Footer className=\"app-footer\">\r\n        <div className=\"footer-info\">\r\n          {\r\n            !!pageText.appFooter && \r\n            <span><strong>{pageText.appFooter[0]}</strong> seanli9018@gmail.com; <strong>{pageText.appFooter[1] || ''}</strong> 312-825-9982</span>\r\n          }\r\n        </div>\r\n      </Footer>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(AppFooter);","//1.添加所有的已经存在的任务\r\nexport const ADD_ALL_TASKS = 'add_all_tasks';\r\n//2.添加一条任务\r\nexport const ADD_ONE_TASK = 'add_one_task';\r\n//3.删除一条任务\r\nexport const DEL_ONE_TASK = 'del_one_task';\r\n//4.修改一条任务的完成状态\r\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\r\n//5.修改所有任务的完成状态（全选或全不选）\r\nexport const IS_ALL_FINISHED = 'is_all_finished';\r\n//6.清除所有已完成的任务\r\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\r\n//7.move task item up and down\r\nexport const MOVE_TASK = 'move_task';\r\n//8. Change locale\r\nexport const CHANGE_LOCALE = 'change_locale';","import React from 'react';\r\n\r\n//import from antd\r\nimport {  Radio } from 'antd';\r\n\r\nimport moment from \"moment\";\r\nimport {connect} from \"react-redux\";\r\nimport { changeLocale } from \"../store/actionCreators\";\r\n\r\n\r\nfunction LangRadio(props) {\r\n  const { dispatchChangeLocale } = props;\r\n\r\n  let handleLocale = e => {\r\n    let localeValue = {};\r\n    let selectedLocaleValue = e.target.value;\r\n\r\n    // set store locale state\r\n    dispatchChangeLocale(selectedLocaleValue);\r\n\r\n    // set localStorage APP_LANG\r\n    React.$lang.setLang(selectedLocaleValue);\r\n\r\n    if (!localeValue) {\r\n      moment.locale('en');\r\n    } else {\r\n      moment.locale('zh-cn');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"change-locale\">\r\n        <Radio.Group value={!!React.$lang.userLanguage ? React.$lang.userLanguage : 'en'} onChange={handleLocale}>\r\n          <Radio.Button key=\"en\" value='en'>\r\n            English\r\n          </Radio.Button>\r\n          <Radio.Button key=\"cn\" value='zh-cn'>\r\n            中文\r\n          </Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchChangeLocale(localValue){\r\n      const action = changeLocale(localValue);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\r\nimport {\r\n  ADD_ALL_TASKS,\r\n  ADD_ONE_TASK,\r\n  DEL_ONE_TASK,\r\n  CHANGE_ONE_FINISHED,\r\n  IS_ALL_FINISHED,\r\n  DEL_FINISHED_TASKS,\r\n  MOVE_TASK,\r\n  CHANGE_LOCALE\r\n} from \"./actionTypes\";\r\n\r\n//1.添加所有的已经存在的任务\r\nexport const addAllTasks = (tasks)=>{\r\n  return {\r\n    type: ADD_ALL_TASKS,\r\n    tasks\r\n  }\r\n}\r\n//2.添加一条任务\r\nexport const addOneTask = (task)=>{\r\n  return {\r\n    type: ADD_ONE_TASK,\r\n    task\r\n  }\r\n}\r\n//3.删除一条任务\r\nexport const delOneTask = (taskId)=>{\r\n  return {\r\n    type: DEL_ONE_TASK,\r\n    taskId\r\n  }\r\n}\r\n//4.修改一条任务的完成状态\r\nexport const changeOneFinished = (taskId, finishedStatus)=>{\r\n  return {\r\n    type: CHANGE_ONE_FINISHED,\r\n    taskId,\r\n    finishedStatus\r\n  }\r\n}\r\n//5.修改所有任务的完成状态（全选或全部选）\r\nexport const isAllFinished = (flag)=>{\r\n  return {\r\n    type: IS_ALL_FINISHED,\r\n    flag\r\n  }\r\n}\r\n//6.清除所有已完成的任务\r\nexport const delFinishedTasks = ()=>{\r\n  return {\r\n    type: DEL_FINISHED_TASKS,\r\n  }\r\n}\r\n\r\n//7. move task item up and down\r\nexport const moveTask = (index, diff) => {\r\n  return{\r\n    type: MOVE_TASK,\r\n    index,\r\n    diff\r\n  }\r\n}\r\n\r\n//8. handle locale\r\nexport const changeLocale = (localeValue) => {\r\n  return {\r\n    type: CHANGE_LOCALE,\r\n    localeValue\r\n  }\r\n}","// import from react\r\nimport React from 'react';\r\n\r\n// import from antd\r\nimport {Layout, Menu} from 'antd'\r\nimport { DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined } from \"@ant-design/icons\";\r\n\r\n// import from react-router-dom\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n\r\n// import from redux\r\nimport { connect } from \"react-redux\";\r\n\r\n// import from components\r\nimport LangRadio from \"./LangRadio\";\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction AppHeader(props) {\r\n  const { Header } = Layout;\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  return (\r\n    <>\r\n      <Header \r\n        className=\"app-header\"\r\n      >\r\n        <Menu selectedKeys={[props.history.location.pathname]} mode=\"horizontal\">\r\n          {/*Route Navi*/}\r\n          <Menu.Item key=\"/\" icon={<HomeOutlined />}>\r\n            <NavLink exact to=\"/\">{!!pageText.appHeader ? pageText.appHeader[0] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/dashboard\" icon={<DashboardOutlined />}>\r\n            <NavLink exact to=\"/dashboard\">{!!pageText.appHeader ? pageText.appHeader[1] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/usercenter\" icon={<UserOutlined />}>\r\n            <NavLink exact to={{\r\n              pathname: \"/usercenter\",\r\n              search: \"?name=sean&age=18\",\r\n              hash: \"#hashtag\",\r\n              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\r\n            }}>\r\n              {!!pageText.appHeader ? pageText.appHeader[2] : \"\"}\r\n            </NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/tasks\" icon={<UnorderedListOutlined />}>\r\n            <NavLink exact to=\"/tasks\">{!!pageText.appHeader ? pageText.appHeader[3] : \"\"}</NavLink>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <div className=\"header-info\">\r\n          <span className=\"header-signup\"><NavLink exact activeClassName=\"link-text-active\" to=\"/register\">{!!pageText.appHeader ? pageText.appHeader[4] : \"\"}</NavLink></span>\r\n          <LangRadio />\r\n        </div>\r\n      </Header>\r\n    </>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(withRouter(AppHeader));","import React from 'react';\r\n\r\n//import from antd\r\nimport { DatePicker } from \"antd\";\r\n// import { ConfigProvider } from \"antd\";\r\n// import moment from 'moment';\r\n// import 'moment/locale/zh-cn';\r\nimport {connect} from \"react-redux\";\r\n// moment.locale('cn');\r\n\r\n function Home() {\r\n  return (\r\n    <div>\r\n      <DatePicker />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state)=>{\r\n   return {\r\n     locale: state.locale\r\n   }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(Home);","// import from react\r\nimport React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// import from echarts\r\nimport * as echarts from 'echarts/core';\r\nimport {\r\n  GridComponent,\r\n  ToolboxComponent,\r\n  LegendComponent\r\n} from 'echarts/components';\r\nimport {\r\n  LineChart,\r\n  PieChart\r\n} from 'echarts/charts';\r\nimport {\r\n  CanvasRenderer\r\n} from 'echarts/renderers';\r\n\r\nfunction ReactEcharts(props) {\r\n  echarts.use(\r\n    [GridComponent, LineChart, CanvasRenderer, ToolboxComponent,\r\n      LegendComponent, PieChart]\r\n  );\r\n  const echartsInstance = echarts; //echarts object\r\n  let echartsDOMElement = null; //echarts dom\r\n  let { option, style, className } = props // get props\r\n\r\n  // get real dom on didMount\r\n  useEffect(() => {\r\n    //get dom element instance, if no instance then init one\r\n    let echartObj = echartsInstance.getInstanceByDom(echartsDOMElement) ||\r\n      echartsInstance.init(echartsDOMElement);\r\n\r\n    //set echarts option\r\n    echartObj.setOption(option);\r\n\r\n    // Destory the element on WillUnmount\r\n    return function destroyEchartElement() {\r\n      echartObj.dispose();\r\n    }\r\n  }, [option])\r\n\r\n  return (\r\n    <div\r\n      ref={(e) => {echartsDOMElement = e}}\r\n      style={style}\r\n      className={className}\r\n    >Echarts</div>\r\n  )\r\n}\r\n\r\n// specify propTypes for component\r\nReactEcharts.propTypes = {\r\n  option: PropTypes.object.isRequired,\r\n  style: PropTypes.object,\r\n  className: PropTypes.string\r\n}\r\n\r\nReactEcharts.defaultProps = {\r\n  style: {height: \"300px\", width: \"500px\"},\r\n  className: \"\"\r\n}\r\n\r\nexport default ReactEcharts;","import React, {useEffect} from 'react';\r\n\r\n// import components\r\nimport ReactEcharts from \"../components/ReactEcharts\";\r\n\r\n\r\nfunction Dashboard() {\r\n  let option1 = {\r\n    xAxis: {\r\n      type: 'category',\r\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    },\r\n    yAxis: {\r\n      type: 'value'\r\n    },\r\n    series: [{\r\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\r\n      type: 'line',\r\n      smooth: true\r\n    }]\r\n  }\r\n\r\n  let option2 = {\r\n    legend: {\r\n      top: 'bottom'\r\n    },\r\n    toolbox: {\r\n      show: true,\r\n      feature: {\r\n        mark: {show: true},\r\n        dataView: {show: true, readOnly: false},\r\n        restore: {show: true},\r\n        saveAsImage: {show: true}\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Pattern',\r\n        type: 'pie',\r\n        radius: [50, 100],\r\n        center: ['50%', '50%'],\r\n        roseType: 'area',\r\n        itemStyle: {\r\n          borderRadius: 8\r\n        },\r\n        data: [\r\n          {value: 40, name: 'rose 1'},\r\n          {value: 38, name: 'rose 2'},\r\n          {value: 32, name: 'rose 3'},\r\n          {value: 30, name: 'rose 4'},\r\n          {value: 28, name: 'rose 5'},\r\n          {value: 26, name: 'rose 6'},\r\n          {value: 22, name: 'rose 7'},\r\n          {value: 18, name: 'rose 8'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <div id=\"main-container\" style={{display: 'flex', flexDirection: 'row'}}>\r\n      <ReactEcharts option={option1} />\r\n      <ReactEcharts option={option2} style={{\"width\": \"500px\", \"height\": \"350px\"}}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction UserCenter(props) {\r\n  const query = new URLSearchParams(props.location.search);\r\n  const { locale } = props\r\n\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  console.log(query.get(\"name\"));\r\n  console.log(query.get(\"age\"));\r\n  return (\r\n    <div>\r\n      {!!pageText && pageText.usercenterTitle}\r\n    </div>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(UserCenter);","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Button(props) {\r\n  // get props\r\n  const { showBtn, value, onClickFunction, btnClass }= props;\r\n\r\n  // render virtual element\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"button\"\r\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\r\n        value={value}\r\n        style={{display: showBtn ? \"block\" : \"none\"}}\r\n        onClick={() => onClickFunction()}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nButton.propTypes = {\r\n  showBtn: PropTypes.bool.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  btnClass: PropTypes.string,\r\n  onClickFunction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Button;","// React imports\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\r\n\r\n// components imports\r\nimport Button from './Button';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction Item(props) {\r\n  const [showBtns, setShowBtns] = useState(false);\r\n  const [showUpBtns, setShowUpBtns] = useState(false);\r\n  const [showDownBtns, setShowDownBtns] = useState(false);\r\n  const { locale } = props;\r\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  //flag is a boolean, flag = onMouseOver ? true : false\r\n  function handleShowDelBtn(flag) {\r\n    setShowBtns(flag);\r\n  }\r\n\r\n  //if index !== 0, then show up btn\r\n  function handleUpBtns(index) {\r\n    if(index !== 0 ){\r\n      setShowUpBtns(true);\r\n    }else{\r\n      setShowUpBtns(false);\r\n    }\r\n  }\r\n\r\n  //if index !== last index, then show down btn\r\n  function handleDownBtns(index) {\r\n    if(index !== tasks.length-1){\r\n      setShowDownBtns(true);\r\n    }else{\r\n      setShowDownBtns(false);\r\n    }\r\n  }\r\n \r\n\r\n  function handleShowBtn(flag, index){\r\n    // Mouse hover ? show : hide\r\n    handleShowDelBtn(flag);\r\n    \r\n    // control Up btn and down btn show/hide\r\n    if(index !== undefined){\r\n      handleUpBtns(index);\r\n      handleDownBtns(index);\r\n    }\r\n  }\r\n\r\n  // finished ? dispatch delete task : prompt confirm modal\r\n  function handleItemDelete(itemId, finshedStatus){\r\n    const { dispatchDelOneTask } = props;\r\n    if(finshedStatus){\r\n      dispatchDelOneTask(itemId);\r\n    }else{\r\n      // prompt Confirm modal\r\n      React.$modal.confirm(()=>{ // Ok clicked\r\n        dispatchDelOneTask(itemId);\r\n      }, ()=>{ // Cancel clicked\r\n        console.log(\"Clicked Cancel\");\r\n      }, \"Do you really want to delete unfinished task?\")\r\n    }\r\n  }\r\n\r\n  const { item, itemIndex, dispatchChangeTaskFinished, handleMoveEvent, tasks } = props;\r\n\r\n  return (\r\n    <li className=\"task-item\"\r\n        onMouseOver={() => handleShowBtn(true, itemIndex)}\r\n        onMouseOut={() => handleShowBtn(false)}\r\n    >\r\n      <label htmlFor={\"item-check-box\"+item.id}>\r\n        <input\r\n          className=\"item-check-box\"\r\n          type=\"checkbox\"\r\n          name=\"item-check-box\"\r\n          id={\"item-check-box\"+item.id}\r\n          checked={item.finished}\r\n          onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\r\n        <span>{item.title}</span>\r\n      </label>\r\n      <div className=\"button-group\">\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[0]:\"\"}\r\n          showBtn={showBtns && showUpBtns}\r\n          onClickFunction={() => handleMoveEvent(itemIndex, -1)}\r\n        />\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[1]:\"\"}\r\n          showBtn={showBtns && showDownBtns}\r\n          onClickFunction={() => handleMoveEvent(itemIndex, 1)}\r\n        />\r\n        <Button\r\n          value={!!pageText.tasksBtns?pageText.tasksBtns[2]:\"\"}\r\n          showBtn={showBtns}\r\n          btnClass=\"delete-btn\"\r\n          onClickFunction={() => this.handleItemDelete(item.id, item.finished)}\r\n        />\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\nItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  handleMoveEvent: PropTypes.func.isRequired,\r\n  itemIndex: PropTypes.number.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchDelOneTask(taskId) {\r\n      // get action object ready\r\n      const action = delOneTask(taskId);\r\n      dispatch(action);\r\n    },\r\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\r\n      // get action object ready\r\n      const action = changeOneFinished(taskId, finishedStatus);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export Item component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\r\n\r\n// import components\r\nimport Item from './Item';\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport { moveTask } from \"../store/actionCreators\";\r\n\r\n\r\n// List component\r\nfunction List(props) {\r\n  // get tasks from props;\r\n  const { tasks, dispatchSortItem } = props;\r\n  return (\r\n    <ul className=\"task-list\">\r\n        {tasks.map((task, index) => (\r\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\n// get redux state and passing it to component props\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchSortItem(index, diff){\r\n      const action = moveTask(index, diff);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {useState} from 'react';\r\n\r\n//import react-redux\r\nimport { connect } from 'react-redux';\r\nimport { addOneTask } from '../store/actionCreators';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction TodoHeader(props) {\r\n  const [taskInput, setTaskInput] = useState('');\r\n  const { locale } = props;\r\n\r\n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  function handleInputChange(e) {\r\n    setTaskInput(e.target.value);\r\n  }\r\n\r\n  // handle Enter key down event\r\n  function handleKeyEvent(e) {\r\n    // 0. initial and get all tasks data\r\n    const { tasks } = props;\r\n\r\n    // 1. handle key down event; dispatch input data to store state\r\n    if(e.keyCode === 13 && !! taskInput) {\r\n      // calculate last task's id based on store state length\r\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\r\n\r\n      // organize the newly created task object\r\n      const item = {\r\n        id: lastItemId + 1,\r\n        title: taskInput.trim(),\r\n        finished: false\r\n      }\r\n\r\n      // dispatch new tasks and set store state\r\n      const { dispatchAddOneTask } = props;\r\n      dispatchAddOneTask(item);\r\n\r\n      // clear header input, after successfully add input value\r\n      setTaskInput('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks-header\">\r\n      <input className=\"task-input\"\r\n             type=\"text\"\r\n             placeholder={pageText.tasksInputPlaceholder}\r\n             value={taskInput}\r\n             onChange={(e) => handleInputChange(e)}\r\n             onKeyDown={(e) => handleKeyEvent(e)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n  // return newly matched store state to component props\r\n  return {\r\n    tasks: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  // return newly matched store dispatch to component props\r\n  return {\r\n    dispatchAddOneTask(task) {\r\n      // get action object\r\n      const action = addOneTask(task);\r\n      // dispatch to reducer to update store state\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React from 'react';\r\n\r\n// react-redux imports\r\nimport { connect } from 'react-redux';\r\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\r\n\r\n// import component\r\nimport Button from './Button';\r\n\r\n// import custimazied hook, get language data.\r\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\r\n\r\nfunction TodoFooter (props) {\r\n  const { locale } = props;\r\n  \r\n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\r\n  const pageText = useLanguagePageText(locale);\r\n\r\n  // calculate the count of finished tasks\r\n  function _calculateFinishedTasks(tasks) {\r\n    let finishedTaskCount = 0;\r\n\r\n    tasks.forEach((task) => {\r\n      if (task.finished === true) {\r\n        finishedTaskCount += 1;\r\n      }\r\n    })\r\n    return finishedTaskCount\r\n  }\r\n\r\n  const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = props;\r\n  const finishedItems = _calculateFinishedTasks(items);\r\n  const totalItems = items.length;\r\n\r\n  return (\r\n    <div className=\"tasks-footer\">\r\n      <div className=\"tasks-footer-info\">\r\n        <label htmlFor=\"footer-checkbox\"></label>\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"footer-checkbox\"\r\n          checked={finishedItems === totalItems && totalItems > 0}\r\n          onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\r\n        />\r\n        {\r\n          !!pageText.tasksFooter && //if pageText.tasksFooter is Not undefined, then we render, otherwise it will thorw a error\r\n          <span className=\"task-info\">\r\n            {pageText.tasksFooter[0]} {finishedItems} {finishedItems===1?pageText.tasksFooter[1]:pageText.tasksFooter[2]} / {finishedItems===1?pageText.tasksFooter[3]:pageText.tasksFooter[4]} {totalItems}\r\n          </span>\r\n        }\r\n      </div>\r\n      {/* <input type=\"button\" className=\"btn\" value={!!pageText && pageText.tasksFooterBtn} onClick={() => dispatchDelFinishedTasks()} /> */}\r\n      <Button showBtn={true} value={pageText.tasksFooterBtn || ''} onClickFunction={() => dispatchDelFinishedTasks()}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.tasks,\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatchDelFinishedTasks() {\r\n      // get action object ready\r\n      const action = delFinishedTasks();\r\n      dispatch(action);\r\n    },\r\n    dispatchIsAllFinished(flag) {\r\n      // get action object ready\r\n      const action = isAllFinished(flag);\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export Item component\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\r\n\r\n// Import components\r\nimport List from '../components/List';\r\nimport Header from '../components/TodoHeader';\r\nimport Footer from '../components/TodoFooter';\r\nimport '../index.scss';\r\n\r\n// Import redux and react-redux\r\nimport { connect } from 'react-redux';\r\nimport {addAllTasks} from '../store/actionCreators';\r\n\r\nclass Todos extends React.Component {\r\n  // Did Mount, get data\r\n  componentDidMount() {\r\n    const data = {\r\n      status: 200,\r\n      tasks: [\r\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\r\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\r\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\r\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\r\n      ]\r\n    }\r\n\r\n    //dispatch data to store\r\n    this.props.dispatchData(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='tasks-wrapper'>\r\n        <div className='tasks-container'>\r\n          {/*Header Part - Task Input Box*/}\r\n          <Header />\r\n\r\n          {/*List Part - Task List*/}\r\n          <List />\r\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\r\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\r\n\r\n          {/*Footer Part - Task Control and Delete Btn*/}\r\n          <Footer />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // return newly matched store dispatch to component props\r\n    dispatchData(data){\r\n      // get action\r\n      let action = addAllTasks(data.tasks);\r\n      // dispatch action to reducer to save data as new state\r\n      dispatch(action);\r\n    }\r\n  }\r\n}\r\n\r\n// export default App;\r\nexport default connect(null, mapDispatchToProps)(Todos);\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n//import from antd icon\r\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons'\r\n\r\n\r\nfunction TextInput(props) {\r\n  // get props\r\n  const {inputTitle, inputType, className} = props;\r\n\r\n  // init state\r\n  // store input value\r\n  const [value, setValue] = useState(\"\")\r\n\r\n  // store initial props.inputType, the state input type can be set to \"text\"\r\n  const [type, setType] = useState(props.inputType)\r\n\r\n  // icon style object ready to use\r\n  const iconStyle = { fontSize: \"14px\",\r\n    position: \"absolute\",\r\n    right: \"0\",\r\n    height: \"30px\",\r\n    marginTop: \"8px\",\r\n    boxSizing: \"border-box\",\r\n    color: \"#ccc\",\r\n    minWidth: \"30px\"\r\n  }\r\n\r\n  // handle eye icon onClick event\r\n  function handleEyeSwitch(){\r\n    if(type === \"password\") {\r\n      setType(\"text\") // if current type === \"password\", then we switch it to \"text\"\r\n    } else {\r\n      setType(\"password\")\r\n    }\r\n  }\r\n\r\n  // prepare eyeIconDom, dynamic render based on input type\r\n  // if input type === password, we render eye invisible icon dom, else we render eye icon dom\r\n  const eyeIconDom = (\r\n    <a onClick={()=>{handleEyeSwitch()}}>\r\n      {type === \"password\" ? <EyeInvisibleOutlined style={iconStyle}/>: <EyeOutlined style={iconStyle} />}\r\n    </a>\r\n  )\r\n\r\n  // render\r\n  return (\r\n    <>\r\n      <label htmlFor={inputTitle}>{inputTitle}</label>\r\n      <div style={{position: \"relative\"}}>\r\n        <input\r\n          type={type}\r\n          className={\"text-input \" + (className ? className: \"\")}\r\n          id={inputTitle}\r\n          value={value}\r\n          style={{width: \"100%\"}}\r\n          onChange={(e) => {setValue(e.target.value)}}\r\n        />\r\n        {/*If props.inputType is password, we render this icon, if the type is text, we do not render any icon*/}\r\n        {inputType===\"password\" ? eyeIconDom : null}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nTextInput.propTypes = {\r\n  inputTitle: PropTypes.string.isRequired,\r\n  inputType: PropTypes.string,\r\n  className: PropTypes.string\r\n}\r\n\r\nTextInput.defaultProps = {\r\n  inputType: \"text\"\r\n}\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n// import component\r\nimport Button from \"../components/Button\";\r\nimport TextInput from \"../components/input/TextInput\";\r\n\r\nfunction Register(props) {\r\n  // get props\r\n\r\n  // render virtual element\r\n  return (\r\n    <div className=\"register-wrapper\">\r\n      <div className=\"register-container\">\r\n        <div>\r\n          <h3>Sign Up</h3>\r\n        </div>\r\n        <form action=\"\" className=\"general-form\">\r\n          <TextInput inputTitle=\"Email\"/>\r\n          <TextInput inputTitle=\"Password\" inputType=\"password\"/>\r\n          <TextInput inputTitle=\"Confirm Password\" inputType=\"password\"/>\r\n          <Button showBtn={true} btnClass=\"sign-up-btn\" value=\"Sign Up\" onClickFunction={() => {alert(\"clicked\")}}/>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// specify Button component prop types\r\nRegister.propTypes = {\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport { Layout } from 'antd'\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\nimport Home from \"../pages/Home\";\r\nimport Dashboard from \"../pages/Dashboard\";\r\nimport UserCenter from \"../pages/UserCenter\";\r\nimport Todos from \"../pages/Todos\";\r\nimport Register from \"../pages/Register\";\r\n\r\nfunction AppContent() {\r\n  const { Content } = Layout;\r\n  return (\r\n    <>\r\n      <Content className=\"app-content\">\r\n        {/*Route View/output */}\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/dashboard\" component={Dashboard} />\r\n          <Route exact path=\"/usercenter\" component={UserCenter} />\r\n          <Route exact path=\"/tasks\" component={Todos} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n        </Switch>\r\n      </Content>\r\n    </>\r\n  )\r\n}\r\nexport default AppContent;","//import react\r\nimport React from 'react';\r\n\r\n//import react-router-dom\r\nimport { HashRouter as Router } from \"react-router-dom\"\r\n\r\n// import from react redux\r\nimport {connect} from \"react-redux\";\r\n\r\n//import antd\r\nimport { Layout } from 'antd';\r\nimport { ConfigProvider } from \"antd\";\r\nimport moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\nimport enUS from 'antd/lib/locale/en_US';\r\nimport zhCN from 'antd/lib/locale/zh_CN';\r\n\r\n//import page components\r\nimport AppFooter from './components/AppFooter';\r\nimport AppHeader from './components/AppHeader';\r\nimport AppContent from \"./components/AppContent\";\r\n\r\nmoment.locale('cn');\r\n// app file\r\nfunction App(props) {\r\n  const { locale } = props;\r\n  return (\r\n    //ConfigProvider is for antdesign UI to pass language objects globally.\r\n    <ConfigProvider locale={locale==='zh-cn' ? zhCN : enUS}> \r\n      <Router>\r\n        <Layout>\r\n          <AppHeader />\r\n          <AppContent />\r\n          <AppFooter />\r\n        </Layout>\r\n      </Router>\r\n    </ConfigProvider>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n  return {\r\n    locale: state.locale\r\n  }\r\n}\r\n\r\n// export List component\r\nexport default connect(mapStateToProps, null)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const APP_LANG = 'APP_LANG'\r\n\r\nclass Lang {\r\n  constructor() {\r\n    //init lang\r\n    this.userLanguage = '';\r\n\r\n    //in constructor, we need to get existing APP_LANG from localStorage\r\n    this.userLanguage = localStorage.getItem(APP_LANG);\r\n\r\n    // if there is no APP_LANG in localStorage, we set lang based on browser preference.\r\n    if(!this.userLanguage){\r\n      const userLang = window.navigator.language.toLowerCase() || 'en'; //get browser language preference\r\n      if(userLang === 'zh-cn') {\r\n        this.userLanguage = 'zh-cn'\r\n        localStorage.setItem(APP_LANG, this.userLanguage);\r\n      } else {\r\n        this.userLanguage = 'en'\r\n        localStorage.setItem(APP_LANG, this.userLanguage);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getInstance(){\r\n    if(!this._instance){\r\n      this._instance = new Lang();\r\n    }\r\n    return this._instance\r\n  }\r\n\r\n  // set localStorage APP_LANG\r\n  setLang(language) {\r\n    this.userLanguage = language.toLowerCase();\r\n    localStorage.setItem(APP_LANG, this.userLanguage);\r\n  }\r\n\r\n  // when call this function, will dynamically import matching language JSON file.\r\n  languageLoader() {\r\n    switch (this.userLanguage.toLowerCase()) {\r\n      case 'zh-cn':\r\n        return import('../languages/zhcn.json');\r\n      case 'en-us':\r\n        return import('../languages/enus.json');\r\n      default:\r\n        return import('../languages/enus.json');\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Lang.getInstance();\r\n","// 1. import actionTypes\r\nimport {\r\n  ADD_ALL_TASKS,\r\n  ADD_ONE_TASK,\r\n  DEL_ONE_TASK,\r\n  CHANGE_ONE_FINISHED,\r\n  IS_ALL_FINISHED,\r\n  DEL_FINISHED_TASKS,\r\n  MOVE_TASK,\r\n  CHANGE_LOCALE\r\n} from \"./actionTypes\";\r\n\r\n//1.1 import language instance\r\nimport lang from '../languages/lang';\r\n\r\n// 2. reducer: create default state\r\nconst defaultState = {\r\n  tasks: [],\r\n  locale: lang.userLanguage\r\n}\r\n\r\n// 3. reducer: core methods based on action type\r\nexport default function taskReducer(state=defaultState, action){\r\n  // 1.0 get all existing tasks from database\r\n  if(action.type === ADD_ALL_TASKS) {\r\n    // 1.1 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    // 1.2 passing actions data to the newState\r\n    newState.tasks = action.tasks;\r\n    return newState;\r\n  }\r\n  //2.add a new task\r\n  if(action.type === ADD_ONE_TASK) {\r\n    //2.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const task = action.task\r\n    //2.1 push actions task data to the newState\r\n    tasks.push(task);\r\n    //2.2 set new state\r\n    return newState;\r\n  }\r\n  //3.delete one task\r\n  if(action.type === DEL_ONE_TASK) {\r\n    //3.0. clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const taskId = action.taskId;\r\n    const tasks = newState.tasks;\r\n    //3.1. use map loop, match task ID and return a new tempTasks array\r\n    tasks.forEach((task, index) => {\r\n      if(task.id === taskId) {\r\n        tasks.splice(index, 1);\r\n      }\r\n    })\r\n    //3.2. Assign new tasks array to newState\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //4.change one task's finished status\r\n  if(action.type === CHANGE_ONE_FINISHED) {\r\n    //4.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const taskId = action.taskId;\r\n    const finishedStatus = action.finishedStatus;\r\n\r\n    //4.1. use loop match the task item and change it's finished status\r\n    tasks.forEach((task) => {\r\n      if(task.id === taskId) {\r\n        task.finished = finishedStatus;\r\n      }\r\n    })\r\n\r\n    //4.2. Assign new tempTasks array to new state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //5.change all tasks finished status (select all and de-select all)\r\n  if(action.type === IS_ALL_FINISHED) {\r\n    //5.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const flag = action.flag;\r\n\r\n    //5.1 According to flag, select/de-select all tasks\r\n    tasks.forEach((task) => {\r\n      if(flag){\r\n        task.finished = true;\r\n      } else {\r\n        task.finished = false;\r\n      }\r\n    })\r\n\r\n    //5.2 Assign new tempTasks array to new state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //6.clean all finished tasks\r\n  if(action.type === DEL_FINISHED_TASKS) {\r\n    //6.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const tempTasks = [];\r\n\r\n    //6.1 push all unfinished task to new Array\r\n    tasks.forEach((task) => {\r\n      if(!task.finished){\r\n        tempTasks.push(task);\r\n      }\r\n    })\r\n\r\n    //6.2 set State and re-rendering\r\n    newState.tasks = tempTasks;\r\n    return newState;\r\n  }\r\n  //7. move task item up and down\r\n  if(action.type === MOVE_TASK) {\r\n    //7.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const tasks = newState.tasks;\r\n    const index = action.index;\r\n    const diff = action.diff;\r\n\r\n    //7.1 handle item sorting\r\n    const item = tasks[index];\r\n    tasks.splice(index, 1);\r\n    tasks.splice(index + diff, 0, item);\r\n\r\n    //7.2 set state\r\n    newState.tasks = tasks;\r\n    return newState;\r\n  }\r\n  //8. Change locale\r\n  if(action.type === CHANGE_LOCALE) {\r\n    // 8.0 clone current state\r\n    const newState = JSON.parse(JSON.stringify(state));\r\n    const localeValue = action.localeValue;\r\n\r\n    // 8.1 handle change locale\r\n    newState.locale = localeValue;\r\n\r\n    // 8.2 set state\r\n    return newState\r\n  }\r\n  return state;\r\n}\r\n\r\n\r\n","import { createStore }  from 'redux';\r\nimport reducers from './reducers'\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import { notification } from 'antd';\r\n\r\nclass AppNotification {\r\n    constructor(){\r\n        this.config = {}\r\n    }\r\n\r\n    _configNotice(message, description, duration){\r\n        this.config.message = message;\r\n        this.config.description = description;\r\n        this.config.duration = duration;\r\n    }\r\n\r\n    success(message=\"Notice\", description=\"Successfully operated\", duration=3) {\r\n        this._configNotice(message, description, duration);\r\n        notification.success(this.config)\r\n    }\r\n\r\n    info(message=\"Notice\", description=\"Infomation\", duration=3) {\r\n        this._configNotice(message, description, duration);\r\n        notification.info(this.config)\r\n    }\r\n\r\n    warning(message=\"Warning\", description=\"Warning message\", duration=5) {\r\n        this._configNotice(message, description, duration);\r\n        notification.warning(this.config)\r\n    }\r\n\r\n    error(message=\"Error\", description=\"Operation failed\", duration=5) {\r\n        this._configNotice(message, description, duration);\r\n        notification.error(this.config)\r\n    }\r\n}\r\n\r\nexport default new AppNotification();","import { Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { confirm } = Modal;\r\n\r\nclass AppModal {\r\n    constructor(){\r\n        this.config = {\r\n            icon: <ExclamationCircleOutlined />\r\n        }\r\n    }\r\n\r\n    _configModal(onOk, onCancel, title, content){\r\n        this.config.onOk = onOk;\r\n        this.config.onCancel = onCancel;\r\n        this.config.title = title;\r\n        this.config.content = content;\r\n    }\r\n\r\n    confirm(onOK, onCancel, title=\"Do you want to delete this item?\", content=\"Click Yes or Cancel\") {\r\n        this._configModal(onOK, onCancel, title, content, );\r\n        confirm(this.config);\r\n    }\r\n}\r\n\r\nexport default new AppModal();","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// import Redux react-redux;\r\nimport { Provider } from 'react-redux';\r\nimport store from '../src/store/index';\r\n\r\nimport notice from '../src/utils/notification';\r\nimport modal from '../src/utils/modal';\r\nimport lang from '../src/languages/lang';\r\n\r\n// React.$notification = (message) => {\r\n//   console.log(message);\r\n//   notification.success({message: message});\r\n// }\r\n\r\n// bind notice class instance to React globally\r\nReact.$notice = notice;\r\n//bind modal class instance to React globally\r\nReact.$modal = modal;\r\n// bind lang class to React globally\r\nReact.$lang = lang;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}