{"version":3,"sources":["components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","components/ReactEcharts.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","store/reducers.js","store/index.js","utils/notification.js","utils/modal.js","index.js"],"names":["AppFooter","Footer","Layout","className","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","connect","state","locale","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","props","Group","value","enUS","onChange","e","target","moment","Button","zhCN","AppHeader","useState","current","setCurrent","Header","onClick","key","selectedKeys","mode","Item","icon","HomeOutlined","exact","activeClassName","to","DashboardOutlined","UserOutlined","pathname","search","hash","fromDashboard","link","userId","UnorderedListOutlined","ReactEcharts","echarts","GridComponent","LineChart","CanvasRenderer","ToolboxComponent","LegendComponent","PieChart","echartsInstance","echartsDOMElement","option","style","useEffect","echartObj","getInstanceByDom","init","setOption","dispose","ref","defaultProps","height","width","Dashboard","id","display","flexDirection","xAxis","data","yAxis","series","smooth","legend","top","toolbox","show","feature","mark","dataView","readOnly","restore","saveAsImage","name","radius","center","roseType","itemStyle","borderRadius","UserCenter","console","log","this","location","query","URLSearchParams","get","React","Component","showBtn","onClickFunction","btnClass","showBtns","showUpBtns","showDownBtns","flag","setState","index","tasks","length","handleShowDelBtn","undefined","handleUpBtns","handleDownBtns","itemId","finshedStatus","dispatchDelOneTask","$modal","confirm","item","itemIndex","dispatchChangeTaskFinished","handleMoveEvent","onMouseOver","handleShowBtn","onMouseOut","htmlFor","checked","finished","title","handleItemDelete","taskId","delOneTask","finishedStatus","changeOneFinished","dispatchSortItem","diff","moveTask","map","task","TodoHeader","taskInput","keyCode","trim","dispatchAddOneTask","placeholder","handleInputChange","onKeyDown","handleKeyEvent","addOneTask","TodoFooter","finishedTaskCount","forEach","items","dispatchIsAllFinished","dispatchDelFinishedTasks","finishedItems","_calculateFinishedTasks","totalItems","isAllFinished","Todos","dispatchData","status","AppContent","Content","path","component","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","newState","JSON","parse","stringify","push","splice","tempTasks","config","message","description","duration","_configNotice","notification","success","info","warning","error","Modal","ExclamationCircleOutlined","onOk","onCancel","content","onOK","_configModal","$notice","notice","modal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bb687b3.chunk.js","sourcesContent":["import React from 'react';\nimport {Layout} from 'antd'\n\nfunction AppFooter() {\n  const { Footer } = Layout;\n\n  return (\n    <>\n      <Footer className=\"app-footer\">\n        <div className=\"footer-info\">\n          <span><strong>Email:</strong> seanli9018@gmail.com; <strong>Phone:</strong> 312-825-9982</span>\n        </div>\n      </Footer>\n    </>\n  )\n}\nexport default AppFooter;","//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\n//7.move task item up and down\nexport const MOVE_TASK = 'move_task';\n//8. Change locale\nexport const CHANGE_LOCALE = 'change_locale';","import React from 'react';\n\n//import from antd\nimport {  Radio } from 'antd';\nimport enUS from 'antd/lib/locale/en_US';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport { changeLocale } from \"../store/actionCreators\";\n\n\nfunction LangRadio(props) {\n  const { locale, dispatchChangeLocale } = props;\n\n  let handleLocale = e => {\n    // get radio user selected value\n    const localeValue = e.target.value;\n\n    // set store locale state\n    dispatchChangeLocale(localeValue);\n\n    if (!localeValue) {\n      moment.locale('en');\n    } else {\n      moment.locale('zh-cn');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"change-locale\">\n        <Radio.Group value={!!locale ? locale : enUS} onChange={handleLocale}>\n          <Radio.Button key=\"en\" value={enUS}>\n            English\n          </Radio.Button>\n          <Radio.Button key=\"cn\" value={zhCN}>\n            中文\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchChangeLocale(localValue){\n      const action = changeLocale(localValue);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}\n\n//7. move task item up and down\nexport const moveTask = (index, diff) => {\n  return{\n    type: MOVE_TASK,\n    index,\n    diff\n  }\n}\n\n//8. handle locale\nexport const changeLocale = (localeValue) => {\n  return {\n    type: CHANGE_LOCALE,\n    localeValue\n  }\n}","// import from react\nimport React, {useState} from 'react';\n\n// import from antd\nimport {Layout, Menu} from 'antd'\nimport {DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined} from \"@ant-design/icons\";\n\n// import from react-router-dom\nimport {NavLink} from \"react-router-dom\";\n\n// import from components\nimport LangRadio from \"./LangRadio\";\n\nfunction AppHeader() {\n  const [current, setCurrent] = useState('home')\n  const { Header } = Layout;\n  let handleClick = e => {\n    setCurrent(e.key);\n  };\n  return (\n    <>\n      <Header className=\"app-header\">\n        <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n          {/*Route Navi*/}\n          <Menu.Item key=\"home\" icon={<HomeOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/\">Home</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/dashboard\">Dashboard</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"usercenter\" icon={<UserOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to={{\n              pathname: \"/usercenter\",\n              search: \"?name=sean&age=18\",\n              hash: \"#hashtag\",\n              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\n            }}>\n              User Center\n            </NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"tasks\" icon={<UnorderedListOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/tasks\">Tasks</NavLink>\n          </Menu.Item>\n        </Menu>\n        <LangRadio />\n      </Header>\n    </>\n  )\n}\nexport default AppHeader;","import React from 'react';\n\n//import from antd\nimport { DatePicker } from \"antd\";\n// import { ConfigProvider } from \"antd\";\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\nimport {connect} from \"react-redux\";\n// moment.locale('cn');\n\n function Home() {\n  return (\n    <div>\n      <DatePicker />\n    </div>\n  );\n}\nconst mapStateToProps = (state)=>{\n   return {\n     locale: state.locale\n   }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(Home);","// import from react\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\n// import from echarts\nimport * as echarts from 'echarts/core';\nimport {\n  GridComponent,\n  ToolboxComponent,\n  LegendComponent\n} from 'echarts/components';\nimport {\n  LineChart,\n  PieChart\n} from 'echarts/charts';\nimport {\n  CanvasRenderer\n} from 'echarts/renderers';\n\nfunction ReactEcharts(props) {\n  echarts.use(\n    [GridComponent, LineChart, CanvasRenderer, ToolboxComponent,\n      LegendComponent, PieChart]\n  );\n  const echartsInstance = echarts; //echarts object\n  let echartsDOMElement = null; //echarts dom\n  let { option, style, className } = props // get props\n\n  // get real dom on didMount\n  useEffect(() => {\n    //get dom element instance, if no instance then init one\n    let echartObj = echartsInstance.getInstanceByDom(echartsDOMElement) ||\n      echartsInstance.init(echartsDOMElement);\n\n    //set echarts option\n    echartObj.setOption(option);\n\n    // Destory the element on WillUnmount\n    return function destroyEchartElement() {\n      echartObj.dispose();\n    }\n  }, [option])\n\n  return (\n    <div\n      ref={(e) => {echartsDOMElement = e}}\n      style={style}\n      className={className}\n    >Echarts</div>\n  )\n}\n\n// specify propTypes for component\nReactEcharts.propTypes = {\n  option: PropTypes.object.isRequired,\n  style: PropTypes.object,\n  className: PropTypes.string\n}\n\nReactEcharts.defaultProps = {\n  style: {height: \"300px\", width: \"500px\"},\n  className: \"\"\n}\n\nexport default ReactEcharts;","import React, {useEffect} from 'react';\n\n// import components\nimport ReactEcharts from \"../components/ReactEcharts\";\n\n\nfunction Dashboard() {\n  let option1 = {\n    xAxis: {\n      type: 'category',\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [{\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true\n    }]\n  }\n\n  let option2 = {\n    legend: {\n      top: 'bottom'\n    },\n    toolbox: {\n      show: true,\n      feature: {\n        mark: {show: true},\n        dataView: {show: true, readOnly: false},\n        restore: {show: true},\n        saveAsImage: {show: true}\n      }\n    },\n    series: [\n      {\n        name: 'Pattern',\n        type: 'pie',\n        radius: [50, 100],\n        center: ['50%', '50%'],\n        roseType: 'area',\n        itemStyle: {\n          borderRadius: 8\n        },\n        data: [\n          {value: 40, name: 'rose 1'},\n          {value: 38, name: 'rose 2'},\n          {value: 32, name: 'rose 3'},\n          {value: 30, name: 'rose 4'},\n          {value: 28, name: 'rose 5'},\n          {value: 26, name: 'rose 6'},\n          {value: 22, name: 'rose 7'},\n          {value: 18, name: 'rose 8'}\n        ]\n      }\n    ]\n  }\n  return (\n    <div id=\"main-container\" style={{display: 'flex', flexDirection: 'row'}}>\n      <ReactEcharts option={option1} />\n      <ReactEcharts option={option2} style={{\"width\": \"500px\", \"height\": \"350px\"}}/>\n    </div>\n  )\n}\n\nexport default Dashboard;","import React from 'react';\n\nclass UserCenter extends React.Component {\n  render() {\n    console.log(this.props.location);\n\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"));\n    console.log(query.get(\"age\"));\n\n    return (\n      <div>\n        This is User Center page\n      </div>\n    );\n  }\n}\n\nexport default UserCenter;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\nclass Item extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired,\n    handleMoveEvent: PropTypes.func.isRequired,\n    itemIndex: PropTypes.number.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBtns: false,\n      showUpBtns: false,\n      showDownBtns: false\n    }\n  }\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  handleShowDelBtn(flag) {\n    this.setState({\n      showBtns: flag\n    })\n  }\n\n  //if index !== 0, then show up btn\n  handleUpBtns(index) {\n    if(index !== 0 ){\n      this.setState({\n        showUpBtns: true\n      })\n    }else{\n      this.setState({\n        showUpBtns: false\n      })\n    }\n  }\n\n  //if index !== last index, then show down btn\n  handleDownBtns(index) {\n    if(index !== this.props.tasks.length-1){\n      this.setState({\n        showDownBtns: true\n      })\n    }else{\n      this.setState({\n        showDownBtns: false\n      })\n    }\n  }\n \n\n  handleShowBtn(flag, index){\n    // Mouse hover ? show : hide\n    this.handleShowDelBtn(flag);\n    \n    // control Up btn and down btn show/hide\n    if(index !== undefined){\n      this.handleUpBtns(index);\n      this.handleDownBtns(index);\n    }\n  }\n\n  // finished ? dispatch delete task : prompt confirm modal\n  handleItemDelete(itemId, finshedStatus){\n    const { dispatchDelOneTask } = this.props;\n    if(finshedStatus){\n      dispatchDelOneTask(itemId);\n    }else{\n      // prompt Confirm modal\n      React.$modal.confirm(()=>{ // Ok clicked\n        dispatchDelOneTask(itemId);\n      }, ()=>{ // Cancel clicked\n        console.log(\"Clicked Cancel\");\n      }, \"Do you really want to delete unfinished task?\")\n    }\n  }\n\n  render() {\n    const {item, itemIndex, dispatchChangeTaskFinished, handleMoveEvent} = this.props;\n    const {showBtns, showUpBtns, showDownBtns} = this.state;\n    return (\n      <li className=\"task-item\"\n          // onFocus={() => this.handleShowBtn(true)}\n          // onBlur={() => this.handleShowBtn(false)}\n          onMouseOver={() => this.handleShowBtn(true, itemIndex)}\n          onMouseOut={() => this.handleShowBtn(false)}\n      >\n        <label htmlFor={\"item-check-box\"+item.id}>\n          <input\n            className=\"item-check-box\"\n            type=\"checkbox\"\n            name=\"item-check-box\"\n            id={\"item-check-box\"+item.id}\n            checked={item.finished}\n            onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n          <span>{item.title}</span>\n        </label>\n        <div className=\"button-group\">\n          <Button\n            value=\"Up\"\n            showBtn={showBtns && showUpBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, -1)}\n          />\n          <Button\n            value=\"Down\"\n            showBtn={showBtns && showDownBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, 1)}\n          />\n          <Button\n            value=\"Delete\"\n            showBtn={showBtns}\n            btnClass=\"delete-btn\"\n            onClickFunction={() => this.handleItemDelete(item.id, item.finished)}\n          />\n        </div>\n      </li>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\n\n// import components\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport { moveTask } from \"../store/actionCreators\";\n\n\n// List component\nfunction List(props) {\n  // get tasks from props;\n  const { tasks, dispatchSortItem } = props;\n  return (\n    <ul className=\"task-list\">\n        {tasks.map((task, index) => (\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\n        ))}\n    </ul>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSortItem(index, diff){\n      const action = moveTask(index, diff);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {Component} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\nclass TodoHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: ''\n    }\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      taskInput: e.target.value\n    })\n  }\n\n  // handle Enter key down event\n  handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = this.props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !!this.state.taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: this.state.taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      this.props.dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      this.setState({\n        taskInput: ''\n      })\n    }\n  }\n\n  render() {\n    const {taskInput} = this.state;\n\n    return (\n      <div className=\"tasks-header\">\n        <input className=\"task-input\"\n               type=\"text\"\n               placeholder=\"Input the task you need to accomplish, then press enter key!\"\n               value={taskInput}\n               onChange={(e) => this.handleInputChange(e)}\n               onKeyDown={(e) => this.handleKeyEvent(e)}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React, {Component} from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\nclass TodoFooter extends Component {\n  // calculate the count of finished tasks\n  _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  render() {\n    const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = this.props;\n    const finishedItems = this._calculateFinishedTasks(items);\n    const totalItems = items.length;\n    return (\n      <div className=\"tasks-footer\">\n        <label htmlFor=\"footer-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"footer-checkbox\"\n            checked={finishedItems === totalItems && totalItems > 0}\n            onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n          />\n          <span className=\"task-info\">Completed {finishedItems} {finishedItems===1?\"task\":\"tasks\"} / Total {totalItems===1?\"task\":\"tasks\"}: {totalItems}</span>\n        </label>\n        <input type=\"button\" className=\"btn\" value=\"Delete Completed Tasks\" onClick={() => dispatchDelFinishedTasks()}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/TodoHeader';\nimport Footer from '../components/TodoFooter';\nimport '../index.scss';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    return (\n      <div className='tasks-wrapper'>\n        <div className='tasks-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React from 'react';\nimport { Layout } from 'antd'\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Home from \"../pages/Home\";\nimport Dashboard from \"../pages/Dashboard\";\nimport UserCenter from \"../pages/UserCenter\";\nimport Todos from \"../pages/Todos\";\n\nfunction AppContent() {\n  const { Content } = Layout;\n  return (\n    <>\n      <Content className=\"app-content\">\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/usercenter\" component={UserCenter} />\n          <Route exact path=\"/tasks\" component={Todos} />\n        </Switch>\n      </Content>\n    </>\n  )\n}\nexport default AppContent;","//import react\nimport React from 'react';\n\n//import react-router-dom\nimport { HashRouter as Router } from \"react-router-dom\"\n\n// import from react redux\nimport {connect} from \"react-redux\";\n\n//import antd\nimport { Layout } from 'antd';\nimport { ConfigProvider } from \"antd\";\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\n//import page components\nimport AppFooter from './components/AppFooter';\nimport AppHeader from './components/AppHeader';\nimport AppContent from \"./components/AppContent\";\n\nmoment.locale('cn');\n// app file\nfunction App(props) {\n  const { locale } = props;\n  return (\n    <ConfigProvider locale={locale}>\n      <Router>\n        <Layout>\n          <AppHeader />\n          <AppContent />\n          <AppFooter />\n        </Layout>\n      </Router>\n    </ConfigProvider>\n  )\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// 1. import actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n// 2. reducer: create default state\nconst defaultState = {\n  tasks: [],\n  locale: null\n}\n\n// 3. reducer: core methods based on action type\nexport default function taskReducer(state=defaultState, action){\n  // 1.0 get all existing tasks from database\n  if(action.type === ADD_ALL_TASKS) {\n    // 1.1 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // 1.2 passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.add a new task\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.delete one task\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.change one task's finished status\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.change all tasks finished status (select all and de-select all)\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.clean all finished tasks\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    //6.2 set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n  //7. move task item up and down\n  if(action.type === MOVE_TASK) {\n    //7.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const index = action.index;\n    const diff = action.diff;\n\n    //7.1 handle item sorting\n    const item = tasks[index];\n    tasks.splice(index, 1);\n    tasks.splice(index + diff, 0, item);\n\n    //7.2 set state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //8. Change locale\n  if(action.type === CHANGE_LOCALE) {\n    // 8.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const localeValue = action.localeValue;\n\n    // 8.1 handle change locale\n    newState.locale = localeValue;\n\n    // 8.2 set state\n    return newState\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import { notification } from 'antd';\n\nclass AppNotification {\n    constructor(){\n        this.config = {}\n    }\n\n    _configNotice(message, description, duration){\n        this.config.message = message;\n        this.config.description = description;\n        this.config.duration = duration;\n    }\n\n    success(message=\"Notice\", description=\"Successfully operated\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.success(this.config)\n    }\n\n    info(message=\"Notice\", description=\"Infomation\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.info(this.config)\n    }\n\n    warning(message=\"Warning\", description=\"Warning message\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.warning(this.config)\n    }\n\n    error(message=\"Error\", description=\"Operation failed\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.error(this.config)\n    }\n}\n\nexport default new AppNotification();","import { Modal } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { confirm } = Modal;\n\nclass AppModal {\n    constructor(){\n        this.config = {\n            icon: <ExclamationCircleOutlined />\n        }\n    }\n\n    _configModal(onOk, onCancel, title, content){\n        this.config.onOk = onOk;\n        this.config.onCancel = onCancel;\n        this.config.title = title;\n        this.config.content = content;\n    }\n\n    confirm(onOK, onCancel, title=\"Do you want to delete this item?\", content=\"Click Yes or Cancel\") {\n        this._configModal(onOK, onCancel, title, content, );\n        confirm(this.config);\n    }\n}\n\nexport default new AppModal();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\nimport notice from '../src/utils/notification';\nimport modal from '../src/utils/modal'\n\n// React.$notification = (message) => {\n//   console.log(message);\n//   notification.success({message: message});\n// }\n\n// bind notice class instance to React globally\nReact.$notice = notice;\n//bind modal class instance to React globally\nReact.$modal = modal;\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}