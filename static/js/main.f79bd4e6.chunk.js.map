{"version":3,"sources":["custimizedHook/LanguageHook.jsx","components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","components/ReactEcharts.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/input/TextInput.jsx","pages/Register.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","languages/lang.js","store/reducers.js","store/index.js","utils/notification.js","utils/modal.js","auth/auth.js","index.js"],"names":["useLanguagePageText","locale","useState","pageText","setPageText","useEffect","React","$lang","languageLoader","then","langData","default","connect","state","props","Footer","Layout","className","appFooter","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","Group","value","userLanguage","onChange","e","selectedLocaleValue","target","setLang","moment","Button","withRouter","Header","selectedKeys","history","location","pathname","mode","Item","icon","HomeOutlined","exact","to","appHeader","DashboardOutlined","UserOutlined","search","hash","fromDashboard","link","userId","$auth","email","replace","UnorderedListOutlined","is_authenticated","activeClassName","onClick","clearUserAuth","logoutMsg","loginLogoutMsg","$notice","success","handleLogOut","ReactEcharts","echarts","GridComponent","LineChart","CanvasRenderer","ToolboxComponent","LegendComponent","PieChart","echartsInstance","echartsDOMElement","option","style","echartObj","getInstanceByDom","init","setOption","dispose","ref","defaultProps","height","width","Dashboard","id","display","flexDirection","xAxis","data","yAxis","series","smooth","legend","top","toolbox","show","feature","mark","dataView","readOnly","restore","saveAsImage","name","radius","center","roseType","itemStyle","borderRadius","usercenterTitle","showBtn","onClickFunction","btnClass","tasks","dispatchDelOneTask","taskId","delOneTask","dispatchChangeTaskFinished","finishedStatus","changeOneFinished","showBtns","setShowBtns","showUpBtns","setShowUpBtns","showDownBtns","setShowDownBtns","handleShowBtn","flag","index","handleShowDelBtn","undefined","handleUpBtns","length","handleDownBtns","item","itemIndex","handleMoveEvent","onMouseOver","onMouseOut","htmlFor","checked","finished","title","tasksBtns","handleItemDelete","dispatchSortItem","diff","moveTask","map","task","dispatchAddOneTask","addOneTask","taskInput","setTaskInput","placeholder","tasksInputPlaceholder","handleInputChange","onKeyDown","keyCode","trim","handleKeyEvent","items","dispatchDelFinishedTasks","dispatchIsAllFinished","isAllFinished","finishedItems","finishedTaskCount","forEach","_calculateFinishedTasks","totalItems","tasksFooter","tasksFooterBtn","Todos","this","dispatchData","status","Component","TextInput","inputTitle","inputType","onBlur","setType","iconStyle","fontSize","position","right","marginTop","boxSizing","color","minWidth","eyeIconDom","EyeInvisibleOutlined","EyeOutlined","password","confirmedPassword","formData","setFormData","errors","setErrors","validateField","errorsObj","JSON","parse","stringify","field","indexOf","re","test","signUpValidateMsg","regArray","testResult","every","k","signUpTitle","signUpInputTitle","formDataObj","handleEmailChange","handlePasswordChange","handleConfirmedPasswordChange","signUpSubmitBtn","setUserAuth","push","signUpNoticeMsg","error","AppContent","Content","path","component","Home","UserCenter","Register","console","log","zhCN","enUS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","APP_LANG","Lang","localStorage","getItem","window","navigator","language","toLowerCase","setItem","_instance","getInstance","defaultState","lang","store","createStore","newState","splice","tempTasks","config","message","description","duration","_configNotice","notification","info","warning","confirm","Modal","ExclamationCircleOutlined","onOk","onCancel","content","onOK","_configModal","EMAIL","Auth","removeItem","notice","$modal","modal","auth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f79bd4e6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport default function useLanguagePageText(locale) {\n  const [pageText, setPageText] = useState({});\n\n    // get lang data\n  useEffect(()=>{\n    // after componentDidMount and componentDidUpdate, we need to get langData file and set page text\n    React.$lang.languageLoader().then((langData)=>{\n      setPageText(langData.default);\n    })\n  }, [locale])\n\n  return pageText;\n}","import React from 'react';\n\n// import from redux\nimport {connect} from \"react-redux\";\n\n// import from antd UI\nimport {Layout} from 'antd'\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction AppFooter(props) {\n  const { Footer } = Layout;\n  const { locale } = props\n\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  return (\n    <>\n      <Footer className=\"app-footer\">\n        <div className=\"footer-info\">\n          {\n            !!pageText.appFooter && \n            <span><strong>{pageText.appFooter[0]}</strong> seanli9018@gmail.com; <strong>{pageText.appFooter[1] || ''}</strong> 312-825-9982</span>\n          }\n        </div>\n      </Footer>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\n// export component\nexport default connect(mapStateToProps, null)(AppFooter);","//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\n//7.move task item up and down\nexport const MOVE_TASK = 'move_task';\n//8. Change locale\nexport const CHANGE_LOCALE = 'change_locale';","import React from 'react';\n\n//import from antd\nimport {  Radio } from 'antd';\n\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport { changeLocale } from \"../store/actionCreators\";\n\n\nfunction LangRadio(props) {\n  const { dispatchChangeLocale } = props;\n\n  let handleLocale = e => {\n    let localeValue = {};\n    let selectedLocaleValue = e.target.value;\n\n    // set store locale state\n    dispatchChangeLocale(selectedLocaleValue);\n\n    // set localStorage APP_LANG\n    React.$lang.setLang(selectedLocaleValue);\n\n    if (!localeValue) {\n      moment.locale('en');\n    } else {\n      moment.locale('zh-cn');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"change-locale\">\n        <Radio.Group value={!!React.$lang.userLanguage ? React.$lang.userLanguage : 'en'} onChange={handleLocale}>\n          <Radio.Button key=\"en\" value='en'>\n            English\n          </Radio.Button>\n          <Radio.Button key=\"cn\" value='zh-cn'>\n            中文\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchChangeLocale(localValue){\n      const action = changeLocale(localValue);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}\n\n//7. move task item up and down\nexport const moveTask = (index, diff) => {\n  return{\n    type: MOVE_TASK,\n    index,\n    diff\n  }\n}\n\n//8. handle locale\nexport const changeLocale = (localeValue) => {\n  return {\n    type: CHANGE_LOCALE,\n    localeValue\n  }\n}","// import from react\nimport React from 'react';\n\n// import from antd\nimport {Layout, Menu} from 'antd'\nimport { DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined } from \"@ant-design/icons\";\n\n// import from react-router-dom\nimport { NavLink, withRouter } from \"react-router-dom\";\n\n// import from redux\nimport { connect } from \"react-redux\";\n\n// import from components\nimport LangRadio from \"./LangRadio\";\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction AppHeader(props) {\n  const { Header } = Layout;\n  const { locale } = props\n\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  // handle log out btn click event\n  function handleLogOut() {\n    // clear user auth\n    React.$auth.clearUserAuth();\n    // redirect to log in page\n    props.history.replace('/');\n    // show logout successfully modal\n    let logoutMsg = pageText.loginLogoutMsg ? pageText.loginLogoutMsg[1] : \"\";\n    React.$notice.success(logoutMsg, '', 6);\n  }\n\n  return (\n    <>\n      <Header \n        className=\"app-header\"\n      >\n        <Menu selectedKeys={[props.history.location.pathname]} mode=\"horizontal\">\n          {/*Route Navi*/}\n          <Menu.Item key=\"/\" icon={<HomeOutlined />}>\n            <NavLink exact to=\"/\">{!!pageText.appHeader ? pageText.appHeader[0] : \"\"}</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"/dashboard\" icon={<DashboardOutlined />}>\n            <NavLink exact to=\"/dashboard\">{!!pageText.appHeader ? pageText.appHeader[1] : \"\"}</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"/usercenter\" icon={<UserOutlined />}>\n            <NavLink exact to={{\n              pathname: \"/usercenter\",\n              search: \"?name=sean&age=18\",\n              hash: \"#hashtag\",\n              state: {fromDashboard: true, link: 'google.com', userId: React.$auth.email ? React.$auth.email.replace(/@[\\s\\S]+/, \"\") : \"\"}\n            }}>\n              {!!pageText.appHeader ? pageText.appHeader[2] : \"\"}\n            </NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"/tasks\" icon={<UnorderedListOutlined />}>\n            <NavLink exact to=\"/tasks\">{!!pageText.appHeader ? pageText.appHeader[3] : \"\"}</NavLink>\n          </Menu.Item>\n        </Menu>\n        <div className=\"header-info\">\n          {/*if authenticated, show username, else show signup/login btn*/}\n          { React.$auth.is_authenticated ?\n            <span className=\"header-signup\">\n              <NavLink\n                exact\n                activeClassName=\"link-text-active\"\n                to=\"/usercenter\">\n                {React.$auth.email.replace(/@[\\s\\S]+/, '')}\n              </NavLink>\n              <span className=\"header-logout\" onClick={() => handleLogOut()}>Log out</span>\n            </span> :\n            <span className=\"header-signup\">\n              <NavLink\n                exact\n                activeClassName=\"link-text-active\"\n                to=\"/register\">\n                {!!pageText.appHeader ? pageText.appHeader[4] : \"\"}\n              </NavLink>\n            </span>\n          }\n          <LangRadio />\n        </div>\n      </Header>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(withRouter(AppHeader));","import React from 'react';\n\n//import from antd\nimport { DatePicker } from \"antd\";\n// import { ConfigProvider } from \"antd\";\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\nimport {connect} from \"react-redux\";\n// moment.locale('cn');\n\n function Home() {\n  return (\n    <div>\n      <DatePicker />\n    </div>\n  );\n}\nconst mapStateToProps = (state)=>{\n   return {\n     locale: state.locale\n   }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(Home);","// import from react\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\n// import from echarts\nimport * as echarts from 'echarts/core';\nimport {\n  GridComponent,\n  ToolboxComponent,\n  LegendComponent\n} from 'echarts/components';\nimport {\n  LineChart,\n  PieChart\n} from 'echarts/charts';\nimport {\n  CanvasRenderer\n} from 'echarts/renderers';\n\nfunction ReactEcharts(props) {\n  echarts.use(\n    [GridComponent, LineChart, CanvasRenderer, ToolboxComponent,\n      LegendComponent, PieChart]\n  );\n  const echartsInstance = echarts; //echarts object\n  let echartsDOMElement = null; //echarts dom\n  let { option, style, className } = props // get props\n\n  // get real dom on didMount\n  useEffect(() => {\n    //get dom element instance, if no instance then init one\n    let echartObj = echartsInstance.getInstanceByDom(echartsDOMElement) ||\n      echartsInstance.init(echartsDOMElement);\n\n    //set echarts option\n    echartObj.setOption(option);\n\n    // Destory the element on WillUnmount\n    return function destroyEchartElement() {\n      echartObj.dispose();\n    }\n  }, [option])\n\n  return (\n    <div\n      ref={(e) => {echartsDOMElement = e}}\n      style={style}\n      className={className}\n    >Echarts</div>\n  )\n}\n\n// specify propTypes for component\nReactEcharts.propTypes = {\n  option: PropTypes.object.isRequired,\n  style: PropTypes.object,\n  className: PropTypes.string\n}\n\nReactEcharts.defaultProps = {\n  style: {height: \"300px\", width: \"500px\"},\n  className: \"\"\n}\n\nexport default ReactEcharts;","import React, {useEffect} from 'react';\n\n// import components\nimport ReactEcharts from \"../components/ReactEcharts\";\n\n\nfunction Dashboard() {\n  let option1 = {\n    xAxis: {\n      type: 'category',\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [{\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true\n    }]\n  }\n\n  let option2 = {\n    legend: {\n      top: 'bottom'\n    },\n    toolbox: {\n      show: true,\n      feature: {\n        mark: {show: true},\n        dataView: {show: true, readOnly: false},\n        restore: {show: true},\n        saveAsImage: {show: true}\n      }\n    },\n    series: [\n      {\n        name: 'Pattern',\n        type: 'pie',\n        radius: [50, 100],\n        center: ['50%', '50%'],\n        roseType: 'area',\n        itemStyle: {\n          borderRadius: 8\n        },\n        data: [\n          {value: 40, name: 'rose 1'},\n          {value: 38, name: 'rose 2'},\n          {value: 32, name: 'rose 3'},\n          {value: 30, name: 'rose 4'},\n          {value: 28, name: 'rose 5'},\n          {value: 26, name: 'rose 6'},\n          {value: 22, name: 'rose 7'},\n          {value: 18, name: 'rose 8'}\n        ]\n      }\n    ]\n  }\n  return (\n    <div id=\"main-container\" style={{display: 'flex', flexDirection: 'row'}}>\n      <ReactEcharts option={option1} />\n      <ReactEcharts option={option2} style={{\"width\": \"500px\", \"height\": \"350px\"}}/>\n    </div>\n  )\n}\n\nexport default Dashboard;","import React from 'react';\nimport {connect} from \"react-redux\";\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction UserCenter(props) {\n  //const query = new URLSearchParams(props.location.search);\n  //const userId = props.location.state ? props.location.state.userId : '';\n\n  const { locale } = props\n\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  return (\n    <div>\n      <h1>{!!pageText.usercenterTitle && pageText.usercenterTitle[0]}</h1>\n      {\n        !!React.$auth.is_authenticated &&\n        <span>{!!pageText.usercenterTitle && pageText.usercenterTitle[1] + React.$auth.email.replace(/@[\\s\\S]+/, \"\")}</span>\n      }\n    </div>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(UserCenter);","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction Item(props) {\n  const [showBtns, setShowBtns] = useState(false);\n  const [showUpBtns, setShowUpBtns] = useState(false);\n  const [showDownBtns, setShowDownBtns] = useState(false);\n  const { locale } = props;\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  function handleShowDelBtn(flag) {\n    setShowBtns(flag);\n  }\n\n  //if index !== 0, then show up btn\n  function handleUpBtns(index) {\n    if(index !== 0 ){\n      setShowUpBtns(true);\n    }else{\n      setShowUpBtns(false);\n    }\n  }\n\n  //if index !== last index, then show down btn\n  function handleDownBtns(index) {\n    if(index !== tasks.length-1){\n      setShowDownBtns(true);\n    }else{\n      setShowDownBtns(false);\n    }\n  }\n \n\n  function handleShowBtn(flag, index){\n    // Mouse hover ? show : hide\n    handleShowDelBtn(flag);\n    \n    // control Up btn and down btn show/hide\n    if(index !== undefined){\n      handleUpBtns(index);\n      handleDownBtns(index);\n    }\n  }\n\n  // finished ? dispatch delete task : prompt confirm modal\n  function handleItemDelete(itemId, finshedStatus){\n    const { dispatchDelOneTask } = props;\n    if(finshedStatus){\n      dispatchDelOneTask(itemId);\n    }else{\n      // prompt Confirm modal\n      React.$modal.confirm(()=>{ // Ok clicked\n        dispatchDelOneTask(itemId);\n      }, ()=>{ // Cancel clicked\n        console.log(\"Clicked Cancel\");\n      }, \"Do you really want to delete unfinished task?\")\n    }\n  }\n\n  const { item, itemIndex, dispatchChangeTaskFinished, handleMoveEvent, tasks } = props;\n\n  return (\n    <li className=\"task-item\"\n        onMouseOver={() => handleShowBtn(true, itemIndex)}\n        onMouseOut={() => handleShowBtn(false)}\n    >\n      <label htmlFor={\"item-check-box\"+item.id}>\n        <input\n          className=\"item-check-box\"\n          type=\"checkbox\"\n          name=\"item-check-box\"\n          id={\"item-check-box\"+item.id}\n          checked={item.finished}\n          onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n        <span>{item.title}</span>\n      </label>\n      <div className=\"button-group\">\n        <Button\n          value={!!pageText.tasksBtns?pageText.tasksBtns[0]:\"\"}\n          showBtn={showBtns && showUpBtns}\n          onClickFunction={() => handleMoveEvent(itemIndex, -1)}\n        />\n        <Button\n          value={!!pageText.tasksBtns?pageText.tasksBtns[1]:\"\"}\n          showBtn={showBtns && showDownBtns}\n          onClickFunction={() => handleMoveEvent(itemIndex, 1)}\n        />\n        <Button\n          value={!!pageText.tasksBtns?pageText.tasksBtns[2]:\"\"}\n          showBtn={showBtns}\n          btnClass=\"delete-btn\"\n          onClickFunction={() => this.handleItemDelete(item.id, item.finished)}\n        />\n      </div>\n    </li>\n  )\n}\nItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  handleMoveEvent: PropTypes.func.isRequired,\n  itemIndex: PropTypes.number.isRequired\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks,\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\n\n// import components\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport { moveTask } from \"../store/actionCreators\";\n\n\n// List component\nfunction List(props) {\n  // get tasks from props;\n  const { tasks, dispatchSortItem } = props;\n  return (\n    <ul className=\"task-list\">\n        {tasks.map((task, index) => (\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\n        ))}\n    </ul>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSortItem(index, diff){\n      const action = moveTask(index, diff);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {useState} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction TodoHeader(props) {\n  const [taskInput, setTaskInput] = useState('');\n  const { locale } = props;\n\n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  function handleInputChange(e) {\n    setTaskInput(e.target.value);\n  }\n\n  // handle Enter key down event\n  function handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !! taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      const { dispatchAddOneTask } = props;\n      dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      setTaskInput('');\n    }\n  }\n\n  return (\n    <div className=\"tasks-header\">\n      <input className=\"task-input\"\n             type=\"text\"\n             placeholder={pageText.tasksInputPlaceholder}\n             value={taskInput}\n             onChange={(e) => handleInputChange(e)}\n             onKeyDown={(e) => handleKeyEvent(e)}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks,\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\n// import component\nimport Button from './Button';\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\nfunction TodoFooter (props) {\n  const { locale } = props;\n  \n  //get lang data, passing \"locale\" to dynamically load lang data based on Redux locale state.\n  const pageText = useLanguagePageText(locale);\n\n  // calculate the count of finished tasks\n  function _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = props;\n  const finishedItems = _calculateFinishedTasks(items);\n  const totalItems = items.length;\n\n  return (\n    <div className=\"tasks-footer\">\n      <div className=\"tasks-footer-info\">\n        <label htmlFor=\"footer-checkbox\"></label>\n        <input\n          type=\"checkbox\"\n          id=\"footer-checkbox\"\n          checked={finishedItems === totalItems && totalItems > 0}\n          onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n        />\n        {\n          !!pageText.tasksFooter && //if pageText.tasksFooter is Not undefined, then we render, otherwise it will thorw a error\n          <span className=\"task-info\">\n            {pageText.tasksFooter[0]} {finishedItems} {finishedItems===1?pageText.tasksFooter[1]:pageText.tasksFooter[2]} / {finishedItems===1?pageText.tasksFooter[3]:pageText.tasksFooter[4]} {totalItems}\n          </span>\n        }\n      </div>\n      {/* <input type=\"button\" className=\"btn\" value={!!pageText && pageText.tasksFooterBtn} onClick={() => dispatchDelFinishedTasks()} /> */}\n      <Button showBtn={true} value={pageText.tasksFooterBtn || ''} onClickFunction={() => dispatchDelFinishedTasks()}/>\n    </div>\n  )\n}\n\n// get redux state and passing it to component props.\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks,\n    locale: state.locale\n  }\n}\n\n// get dispatch function to set or change the redux state.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/TodoHeader';\nimport Footer from '../components/TodoFooter';\nimport '../index.scss';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    return (\n      <div className='tasks-wrapper'>\n        <div className='tasks-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types'\n\n//import from antd icon\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons'\n\n\nfunction TextInput(props) {\n  // get props\n  const {inputTitle, inputType, className, value, onChange, onBlur} = props;\n\n  // store initial props.inputType, the state input type can be set to \"text\"\n  const [type, setType] = useState(props.inputType)\n\n  // icon style object ready to use\n  const iconStyle = {\n    fontSize: \"14px\",\n    position: \"absolute\",\n    right: \"0\",\n    height: \"30px\",\n    marginTop: \"8px\",\n    boxSizing: \"border-box\",\n    color: \"#ccc\",\n    minWidth: \"30px\"\n  }\n\n  // handle eye icon onClick event\n  function handleEyeSwitch(){\n    if(type === \"password\") {\n      setType(\"text\") // if current type === \"password\", then we switch it to \"text\"\n    } else {\n      setType(\"password\")\n    }\n  }\n\n  // prepare eyeIconDom, dynamic render based on input type\n  // if input type === password, we render eye invisible icon dom, else we render eye icon dom\n  const eyeIconDom = (\n    <a onClick={()=>{handleEyeSwitch()}}>\n      {type === \"password\" ? <EyeInvisibleOutlined style={iconStyle}/>: <EyeOutlined style={iconStyle} />}\n    </a>\n  )\n\n  // render\n  return (\n    <>\n      <div style={{position: \"relative\", marginTop: \"15px\"}}>\n        <label htmlFor={inputTitle}>{inputTitle}</label>\n        <input\n          type={type}\n          className={\"text-input \" + (className ? className: \"\")}\n          id={inputTitle}\n          value={value}\n          style={{width: \"100%\"}}\n          onChange={(e) => onChange(e)}\n          onBlur={(e) => onBlur(e)}\n        />\n        {/*If props.inputType is password, we render this icon, if the type is text, we do not render any icon*/}\n        {inputType===\"password\" ? eyeIconDom : null}\n      </div>\n    </>\n  )\n}\n\n// specify Button component prop types\nTextInput.propTypes = {\n  inputTitle: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  inputType: PropTypes.string,\n  className: PropTypes.string\n}\n\nTextInput.defaultProps = {\n  inputType: \"text\"\n}\n\nexport default TextInput;","import React, { useState } from 'react';\n\n// import redux\nimport {connect} from 'react-redux';\n\n// import component\nimport Button from '../components/Button';\nimport TextInput from '../components/input/TextInput';\n\n// import custimazied hook, get language data.\nimport useLanguagePageText from '../custimizedHook/LanguageHook';\n\n\nfunction Register(props) {\n  // for form data\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmedPassword: \"\"\n  })\n\n  // for form fields validations.\n  const [errors, setErrors] = useState({});\n\n  //get lang data, passing locale to dynamically load lang data based on Redux locale state.\n  const { locale } = props;\n  const pageText = useLanguagePageText(locale);\n\n  // handle email input change function\n  function handleEmailChange(e) {\n    // deep copy current state data\n    let formDataObj = JSON.parse(JSON.stringify(formData));\n    // change copied data\n    formDataObj.email = e.target.value;\n    // setState the changed copy data to state\n    setFormData(formDataObj);\n  }\n\n  // handle password input change function\n  function handlePasswordChange(e) {\n    // deep copy current state data\n    let formDataObj = JSON.parse(JSON.stringify(formData));\n    // change copied data\n    formDataObj.password = e.target.value;\n    // setState the changed copy data to state\n    setFormData(formDataObj);\n  }\n\n  // handle email input change function\n  function handleConfirmedPasswordChange(e) {\n    // deep copy current state data\n    let formDataObj = JSON.parse(JSON.stringify(formData));\n    // change copied data\n    formDataObj.confirmedPassword = e.target.value;\n    // setState the changed copy data to state\n    setFormData(formDataObj);\n  }\n\n  //validate field\n  function validateField(...field) {\n    // deep copy errors state\n    let errorsObj = JSON.parse(JSON.stringify(errors));\n\n    // email field validate\n    if(field.length === 0 || field.indexOf('email') >= 0){\n      let re = /^\\w+[\\w-]+@\\w+[\\w-]+(\\.[-\\w]+)+$/;\n      if(!formData.email) { // if no email input\n        errorsObj.email = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[0] : '';\n      }else if (!re.test(formData.email)){ // if there is email and NOT pass the reg test\n        errorsObj.email = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[1] : '';\n      }else { //if there is email input and pass the reg test\n        errorsObj.email = \"\";\n      }\n    }\n\n    // password field validate\n    if(field.length === 0 || field.indexOf('password') >= 0){\n      // password has to be 6-15 in length, no Space\n      // password needs to include at least one letter, capital letter, number, and special character.\n      let regArray = [/^\\S{6,15}$/, /[A-Z]/, /[a-z]/, /[0-9]/, /[!@#$%^&*)(_\\-=?/<>.,+|~`]/];\n      let testResult = regArray.every(e => e.test(formData.password));\n      if(!formData.password) { // if no password input\n        errorsObj.password = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[2] : '';\n      }else if(!testResult){ // if the password NOT pass the reg test.\n        errorsObj.password = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[3] : '';\n      }else{ //if there is email input\n        errorsObj.password = \"\";\n      }\n    }\n\n    // confirmed password field validate\n    if(field.length === 0 || field.indexOf('confirmedPassword') >= 0){\n      if(!formData.confirmedPassword) { // if no confirm password input\n        errorsObj.confirmedPassword = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[4] : '';\n      } else { //if confirm password looks good\n        errorsObj.confirmedPassword = \"\";\n      }\n    }\n\n    //matching password and confirm password\n    if(field.length === 0 || field.indexOf('matchPassword') >= 0) {\n      if (formData.confirmedPassword !== formData.password) { // if not matching\n        errorsObj.confirmedPassword = pageText.signUpValidateMsg ? pageText.signUpValidateMsg[5] : '';\n      } else { //if confirm password looks good\n        errorsObj.confirmedPassword = \"\";\n      }\n    }\n\n    // set error state\n    setErrors(errorsObj);\n\n    // once click submit btn, validate errorsObj.\n    for (let k in errorsObj) {\n      if(!!errorsObj[k]){\n        return false; // if there is item in errorsObj: Not pass\n      }\n    }\n    return true; // if there is NO item in errorObj: Passed;\n  }\n\n  // handle form submit\n  function onSubmit() {\n    // run validate func, it validates all fields when no parameters passing in;\n    const validateResult = validateField();\n\n    // do something once passed or NOT passed.\n    if(validateResult){\n      React.$auth.setUserAuth(formData.email); // set auth;\n      props.history.push('/') // redirect to home page;\n      React.$notice.success(pageText.signUpNoticeMsg[0],\n        pageText.signUpNoticeMsg[1], 6)\n    }else{\n      React.$notice.error(pageText.signUpNoticeMsg[2],\n        pageText.signUpNoticeMsg[3], 6)\n    }\n  }\n\n  // render virtual element\n  return (\n    <div className=\"register-wrapper\">\n      <div className=\"register-container\">\n        <div>\n          <h3>{pageText.signUpTitle || \"\"}</h3>\n        </div>\n        <form className=\"general-form\">\n          <TextInput\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[0] : \"\"}\n            value={formData.email}\n            onChange={(e) => handleEmailChange(e)}\n            onBlur={() => validateField(\"email\")}\n          />\n          <span className=\"input-error\">{errors.email || \"\"}</span>\n          <TextInput\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[1] : \"\"}\n            value={formData.password}\n            inputType=\"password\"\n            onChange={(e) => handlePasswordChange(e)}\n            onBlur={() => validateField(\"password\", \"matchPassword\")}\n          />\n          <span className=\"input-error\">{errors.password || \"\"}</span>\n          <TextInput\n            inputTitle={pageText.signUpInputTitle ? pageText.signUpInputTitle[2] : \"\"}\n            value={formData.confirmedPassword}\n            inputType=\"password\"\n            onChange={(e) => handleConfirmedPasswordChange(e)}\n            onBlur={() => validateField(\"confirmedPassword\", \"matchPassword\")}\n          />\n          <span className=\"input-error\">{errors.confirmedPassword || \"\"}</span>\n          <Button showBtn={true} btnClass=\"sign-up-btn\" value={pageText.signUpSubmitBtn || \"\"} onClickFunction={() => onSubmit()}/>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\n// export component\nexport default connect(mapStateToProps, null)(Register);","import React from 'react';\nimport { Layout } from 'antd'\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Home from \"../pages/Home\";\nimport Dashboard from \"../pages/Dashboard\";\nimport UserCenter from \"../pages/UserCenter\";\nimport Todos from \"../pages/Todos\";\nimport Register from \"../pages/Register\";\n\nfunction AppContent() {\n  const { Content } = Layout;\n  return (\n    <>\n      <Content className=\"app-content\">\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/usercenter\" component={UserCenter} />\n          <Route exact path=\"/tasks\" component={Todos} />\n          <Route exact path=\"/register\" component={Register} />\n        </Switch>\n      </Content>\n    </>\n  )\n}\nexport default AppContent;","//import react\nimport React from 'react';\n\n//import react-router-dom\nimport { HashRouter as Router } from \"react-router-dom\"\n\n// import from react redux\nimport {connect} from \"react-redux\";\n\n//import antd\nimport { Layout } from 'antd';\nimport { ConfigProvider } from \"antd\";\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport enUS from 'antd/lib/locale/en_US';\nimport zhCN from 'antd/lib/locale/zh_CN';\n\n//import page components\nimport AppFooter from './components/AppFooter';\nimport AppHeader from './components/AppHeader';\nimport AppContent from \"./components/AppContent\";\n\nmoment.locale('cn');\n// app file\nfunction App(props) {\n  const { locale } = props;\n  console.log(\"Thank you for checking my code! Please contact me via email 'seanli9018@gmail.com' if you are hiring passionate web developer!!!\")\n  return (\n    //ConfigProvider is for antdesign UI to pass language objects globally.\n    <ConfigProvider locale={locale==='zh-cn' ? zhCN : enUS}> \n      <Router>\n        <Layout>\n          <AppHeader />\n          <AppContent />\n          <AppFooter />\n        </Layout>\n      </Router>\n    </ConfigProvider>\n  )\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const APP_LANG = 'APP_LANG'\n\nclass Lang {\n  constructor() {\n    //init lang\n    this.userLanguage = '';\n\n    //in constructor, we need to get existing APP_LANG from localStorage\n    this.userLanguage = localStorage.getItem(APP_LANG);\n\n    // if there is no APP_LANG in localStorage, we set lang based on browser preference.\n    if(!this.userLanguage){\n      const userLang = window.navigator.language.toLowerCase() || 'en'; //get browser language preference\n      if(userLang === 'zh-cn') {\n        this.userLanguage = 'zh-cn'\n        localStorage.setItem(APP_LANG, this.userLanguage);\n      } else {\n        this.userLanguage = 'en'\n        localStorage.setItem(APP_LANG, this.userLanguage);\n      }\n    }\n  }\n\n  static getInstance(){\n    if(!this._instance){\n      this._instance = new Lang();\n    }\n    return this._instance\n  }\n\n  // set localStorage APP_LANG\n  setLang(language) {\n    this.userLanguage = language.toLowerCase();\n    localStorage.setItem(APP_LANG, this.userLanguage);\n  }\n\n  // when call this function, will dynamically import matching language JSON file.\n  languageLoader() {\n    switch (this.userLanguage.toLowerCase()) {\n      case 'zh-cn':\n        return import('../languages/zhcn.json');\n      case 'en-us':\n        return import('../languages/enus.json');\n      default:\n        return import('../languages/enus.json');\n    }\n  }\n}\n\n\n\nexport default Lang.getInstance();\n","// 1. import actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.1 import language instance\nimport lang from '../languages/lang';\n\n// 2. reducer: create default state\nconst defaultState = {\n  tasks: [],\n  locale: lang.userLanguage\n}\n\n// 3. reducer: core methods based on action type\nexport default function taskReducer(state=defaultState, action){\n  // 1.0 get all existing tasks from database\n  if(action.type === ADD_ALL_TASKS) {\n    // 1.1 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // 1.2 passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.add a new task\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.delete one task\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.change one task's finished status\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.change all tasks finished status (select all and de-select all)\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.clean all finished tasks\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    //6.2 set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n  //7. move task item up and down\n  if(action.type === MOVE_TASK) {\n    //7.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const index = action.index;\n    const diff = action.diff;\n\n    //7.1 handle item sorting\n    const item = tasks[index];\n    tasks.splice(index, 1);\n    tasks.splice(index + diff, 0, item);\n\n    //7.2 set state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //8. Change locale\n  if(action.type === CHANGE_LOCALE) {\n    // 8.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const localeValue = action.localeValue;\n\n    // 8.1 handle change locale\n    newState.locale = localeValue;\n\n    // 8.2 set state\n    return newState\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import { notification } from 'antd';\n\nclass AppNotification {\n    constructor(){\n        this.config = {}\n    }\n\n    _configNotice(message, description, duration){\n        this.config.message = message;\n        this.config.description = description;\n        this.config.duration = duration;\n    }\n\n    success(message=\"Notice\", description=\"Successfully operated\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.success(this.config)\n    }\n\n    info(message=\"Notice\", description=\"Infomation\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.info(this.config)\n    }\n\n    warning(message=\"Warning\", description=\"Warning message\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.warning(this.config)\n    }\n\n    error(message=\"Error\", description=\"Operation failed\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.error(this.config)\n    }\n}\n\nexport default new AppNotification();","import { Modal } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { confirm } = Modal;\n\nclass AppModal {\n    constructor(){\n        this.config = {\n            icon: <ExclamationCircleOutlined />\n        }\n    }\n\n    _configModal(onOk, onCancel, title, content){\n        this.config.onOk = onOk;\n        this.config.onCancel = onCancel;\n        this.config.title = title;\n        this.config.content = content;\n    }\n\n    confirm(onOK, onCancel, title=\"Do you want to delete this item?\", content=\"Click Yes or Cancel\") {\n        this._configModal(onOK, onCancel, title, content, );\n        confirm(this.config);\n    }\n}\n\nexport default new AppModal();","const EMAIL = 'EMAIL';\n\nclass Auth{\n  constructor() {\n    // initiate email\n    this.email = ''\n\n    //get email from local storage.\n    this.email = localStorage.getItem(EMAIL);\n  }\n\n  // achieve single instance\n  static getInstance(){\n    if(!this._instance){\n      this._instance = new Auth();\n    }\n    return this._instance;\n  }\n\n  // set auth email\n  setUserAuth(email){\n    this.email = email;\n    // then set new user auth email\n    localStorage.setItem(EMAIL, email);\n  }\n\n  // log out clear auth email\n  clearUserAuth(){\n    // clear this.email\n    this.email = '';\n    // clear localStorage\n    localStorage.removeItem(EMAIL);\n  }\n\n  // check if a user is logged in and authenticated\n  get is_authenticated() {\n    if(this.email) {\n      return true;\n    }else {\n      return false;\n    }\n  }\n}\n\nexport default Auth.getInstance();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\nimport notice from '../src/utils/notification';\nimport modal from '../src/utils/modal';\nimport lang from '../src/languages/lang';\nimport auth from '../src/auth/auth';\n\n// React.$notification = (message) => {\n//   console.log(message);\n//   notification.success({message: message});\n// }\n\n// bind notice class instance to React globally\nReact.$notice = notice;\n//bind modal class instance to React globally\nReact.$modal = modal;\n// bind lang class to React globally\nReact.$lang = lang;\n// bind frontend auth\nReact.$auth = auth;\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}