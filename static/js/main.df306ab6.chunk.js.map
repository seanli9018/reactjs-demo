{"version":3,"sources":["components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","components/ReactEcharts.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/input/TextInput.jsx","pages/Register.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","languages/lang.js","store/reducers.js","store/index.js","utils/notification.js","utils/modal.js","index.js"],"names":["AppFooter","Footer","Layout","className","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","connect","state","locale","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","props","Group","value","React","$lang","userLanguage","onChange","e","selectedLocaleValue","target","setLang","moment","Button","AppHeader","useState","current","setCurrent","Header","onClick","key","selectedKeys","mode","Item","icon","HomeOutlined","exact","activeClassName","to","DashboardOutlined","UserOutlined","pathname","search","hash","fromDashboard","link","userId","UnorderedListOutlined","ReactEcharts","echarts","GridComponent","LineChart","CanvasRenderer","ToolboxComponent","LegendComponent","PieChart","echartsInstance","echartsDOMElement","option","style","useEffect","echartObj","getInstanceByDom","init","setOption","dispose","ref","defaultProps","height","width","Dashboard","id","display","flexDirection","xAxis","data","yAxis","series","smooth","legend","top","toolbox","show","feature","mark","dataView","readOnly","restore","saveAsImage","name","radius","center","roseType","itemStyle","borderRadius","query","URLSearchParams","location","pageText","setPageText","languageLoader","then","langData","default","console","log","get","usercenterTitle","showBtn","onClickFunction","btnClass","showBtns","showUpBtns","showDownBtns","flag","this","setState","index","tasks","length","handleShowDelBtn","undefined","handleUpBtns","handleDownBtns","itemId","finshedStatus","dispatchDelOneTask","$modal","confirm","item","itemIndex","dispatchChangeTaskFinished","handleMoveEvent","onMouseOver","handleShowBtn","onMouseOut","htmlFor","checked","finished","title","handleItemDelete","Component","taskId","delOneTask","finishedStatus","changeOneFinished","dispatchSortItem","diff","moveTask","map","task","dispatchAddOneTask","addOneTask","taskInput","setTaskInput","placeholder","tasksInputPlaceholder","handleInputChange","onKeyDown","keyCode","trim","handleKeyEvent","TodoFooter","finishedTaskCount","forEach","items","dispatchIsAllFinished","dispatchDelFinishedTasks","finishedItems","_calculateFinishedTasks","totalItems","isAllFinished","Todos","dispatchData","status","TextInput","inputTitle","inputType","setValue","setType","iconStyle","fontSize","position","right","marginTop","boxSizing","color","minWidth","eyeIconDom","EyeInvisibleOutlined","EyeOutlined","Register","alert","AppContent","Content","path","component","Home","UserCenter","zhCN","enUS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","APP_LANG","Lang","localStorage","getItem","window","navigator","language","toLowerCase","setItem","_instance","getInstance","defaultState","lang","store","createStore","newState","JSON","parse","stringify","push","splice","tempTasks","config","message","description","duration","_configNotice","notification","success","info","warning","error","Modal","ExclamationCircleOutlined","onOk","onCancel","content","onOK","_configModal","$notice","notice","modal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df306ab6.chunk.js","sourcesContent":["import React from 'react';\nimport {Layout} from 'antd'\n\nfunction AppFooter() {\n  const { Footer } = Layout;\n\n  return (\n    <>\n      <Footer className=\"app-footer\">\n        <div className=\"footer-info\">\n          <span><strong>Email:</strong> seanli9018@gmail.com; <strong>Phone:</strong> 312-825-9982</span>\n        </div>\n      </Footer>\n    </>\n  )\n}\nexport default AppFooter;","//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\n//7.move task item up and down\nexport const MOVE_TASK = 'move_task';\n//8. Change locale\nexport const CHANGE_LOCALE = 'change_locale';","import React from 'react';\n\n//import from antd\nimport {  Radio } from 'antd';\n\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport { changeLocale } from \"../store/actionCreators\";\n\n\nfunction LangRadio(props) {\n  const { dispatchChangeLocale } = props;\n\n  let handleLocale = e => {\n    let localeValue = {};\n    let selectedLocaleValue = e.target.value;\n\n    // get radio user selected value\n    // if(selectedLocaleValue === 'zh-cn') {\n    //   localeValue = zhCN;\n    // }else{\n    //   localeValue = enUS;\n    // }\n\n    // set store locale state\n    dispatchChangeLocale(selectedLocaleValue);\n\n    // set localStorage APP_LANG\n    React.$lang.setLang(selectedLocaleValue);\n\n    if (!localeValue) {\n      moment.locale('en');\n    } else {\n      moment.locale('zh-cn');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"change-locale\">\n        <Radio.Group value={!!React.$lang.userLanguage ? React.$lang.userLanguage : 'en'} onChange={handleLocale}>\n          <Radio.Button key=\"en\" value='en'>\n            English\n          </Radio.Button>\n          <Radio.Button key=\"cn\" value='zh-cn'>\n            中文\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchChangeLocale(localValue){\n      const action = changeLocale(localValue);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}\n\n//7. move task item up and down\nexport const moveTask = (index, diff) => {\n  return{\n    type: MOVE_TASK,\n    index,\n    diff\n  }\n}\n\n//8. handle locale\nexport const changeLocale = (localeValue) => {\n  return {\n    type: CHANGE_LOCALE,\n    localeValue\n  }\n}","// import from react\nimport React, {useState} from 'react';\n\n// import from antd\nimport {Layout, Menu} from 'antd'\nimport {DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined} from \"@ant-design/icons\";\n\n// import from react-router-dom\nimport {NavLink} from \"react-router-dom\";\n\n// import from components\nimport LangRadio from \"./LangRadio\";\n\nfunction AppHeader() {\n  const [current, setCurrent] = useState('home')\n  const { Header } = Layout;\n  let handleClick = e => {\n    setCurrent(e.key);\n  };\n  return (\n    <>\n      <Header className=\"app-header\">\n        <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n          {/*Route Navi*/}\n          <Menu.Item key=\"home\" icon={<HomeOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/\">Home</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/dashboard\">Dashboard</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"usercenter\" icon={<UserOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to={{\n              pathname: \"/usercenter\",\n              search: \"?name=sean&age=18\",\n              hash: \"#hashtag\",\n              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\n            }}>\n              User Center\n            </NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"tasks\" icon={<UnorderedListOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/tasks\">Tasks</NavLink>\n          </Menu.Item>\n        </Menu>\n        <div className=\"header-info\">\n          <span><NavLink exact activeClassName=\"link-text-active\" to=\"/register\">Sign Up</NavLink></span>\n          <LangRadio />\n        </div>\n      </Header>\n    </>\n  )\n}\nexport default AppHeader;","import React from 'react';\n\n//import from antd\nimport { DatePicker } from \"antd\";\n// import { ConfigProvider } from \"antd\";\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\nimport {connect} from \"react-redux\";\n// moment.locale('cn');\n\n function Home() {\n  return (\n    <div>\n      <DatePicker />\n    </div>\n  );\n}\nconst mapStateToProps = (state)=>{\n   return {\n     locale: state.locale\n   }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(Home);","// import from react\nimport React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\n// import from echarts\nimport * as echarts from 'echarts/core';\nimport {\n  GridComponent,\n  ToolboxComponent,\n  LegendComponent\n} from 'echarts/components';\nimport {\n  LineChart,\n  PieChart\n} from 'echarts/charts';\nimport {\n  CanvasRenderer\n} from 'echarts/renderers';\n\nfunction ReactEcharts(props) {\n  echarts.use(\n    [GridComponent, LineChart, CanvasRenderer, ToolboxComponent,\n      LegendComponent, PieChart]\n  );\n  const echartsInstance = echarts; //echarts object\n  let echartsDOMElement = null; //echarts dom\n  let { option, style, className } = props // get props\n\n  // get real dom on didMount\n  useEffect(() => {\n    //get dom element instance, if no instance then init one\n    let echartObj = echartsInstance.getInstanceByDom(echartsDOMElement) ||\n      echartsInstance.init(echartsDOMElement);\n\n    //set echarts option\n    echartObj.setOption(option);\n\n    // Destory the element on WillUnmount\n    return function destroyEchartElement() {\n      echartObj.dispose();\n    }\n  }, [option])\n\n  return (\n    <div\n      ref={(e) => {echartsDOMElement = e}}\n      style={style}\n      className={className}\n    >Echarts</div>\n  )\n}\n\n// specify propTypes for component\nReactEcharts.propTypes = {\n  option: PropTypes.object.isRequired,\n  style: PropTypes.object,\n  className: PropTypes.string\n}\n\nReactEcharts.defaultProps = {\n  style: {height: \"300px\", width: \"500px\"},\n  className: \"\"\n}\n\nexport default ReactEcharts;","import React, {useEffect} from 'react';\n\n// import components\nimport ReactEcharts from \"../components/ReactEcharts\";\n\n\nfunction Dashboard() {\n  let option1 = {\n    xAxis: {\n      type: 'category',\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [{\n      data: [820, 932, 901, 934, 1290, 1330, 1320],\n      type: 'line',\n      smooth: true\n    }]\n  }\n\n  let option2 = {\n    legend: {\n      top: 'bottom'\n    },\n    toolbox: {\n      show: true,\n      feature: {\n        mark: {show: true},\n        dataView: {show: true, readOnly: false},\n        restore: {show: true},\n        saveAsImage: {show: true}\n      }\n    },\n    series: [\n      {\n        name: 'Pattern',\n        type: 'pie',\n        radius: [50, 100],\n        center: ['50%', '50%'],\n        roseType: 'area',\n        itemStyle: {\n          borderRadius: 8\n        },\n        data: [\n          {value: 40, name: 'rose 1'},\n          {value: 38, name: 'rose 2'},\n          {value: 32, name: 'rose 3'},\n          {value: 30, name: 'rose 4'},\n          {value: 28, name: 'rose 5'},\n          {value: 26, name: 'rose 6'},\n          {value: 22, name: 'rose 7'},\n          {value: 18, name: 'rose 8'}\n        ]\n      }\n    ]\n  }\n  return (\n    <div id=\"main-container\" style={{display: 'flex', flexDirection: 'row'}}>\n      <ReactEcharts option={option1} />\n      <ReactEcharts option={option2} style={{\"width\": \"500px\", \"height\": \"350px\"}}/>\n    </div>\n  )\n}\n\nexport default Dashboard;","import React, { useState, useEffect } from 'react';\nimport {connect} from \"react-redux\";\n\n// import language JSON\n//import lang from '../languages/lang';\nfunction UserCenter(props) {\n  const query = new URLSearchParams(props.location.search);\n  const [pageText, setPageText] = useState({})\n  const { locale } = props\n\n\n  useEffect(()=>{\n    // after componentDidMount and componentDidUpdate, we need to get langData file and set page text\n    React.$lang.languageLoader().then((langData)=>{\n      setPageText(langData.default);\n    })\n  }, [locale])\n\n  // console.log(pageText)\n  console.log(query.get(\"name\"));\n  console.log(query.get(\"age\"));\n  return (\n    <div>\n      {pageText.usercenterTitle}\n    </div>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(UserCenter);","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\nclass Item extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired,\n    handleMoveEvent: PropTypes.func.isRequired,\n    itemIndex: PropTypes.number.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBtns: false,\n      showUpBtns: false,\n      showDownBtns: false\n    }\n  }\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  handleShowDelBtn(flag) {\n    this.setState({\n      showBtns: flag\n    })\n  }\n\n  //if index !== 0, then show up btn\n  handleUpBtns(index) {\n    if(index !== 0 ){\n      this.setState({\n        showUpBtns: true\n      })\n    }else{\n      this.setState({\n        showUpBtns: false\n      })\n    }\n  }\n\n  //if index !== last index, then show down btn\n  handleDownBtns(index) {\n    if(index !== this.props.tasks.length-1){\n      this.setState({\n        showDownBtns: true\n      })\n    }else{\n      this.setState({\n        showDownBtns: false\n      })\n    }\n  }\n \n\n  handleShowBtn(flag, index){\n    // Mouse hover ? show : hide\n    this.handleShowDelBtn(flag);\n    \n    // control Up btn and down btn show/hide\n    if(index !== undefined){\n      this.handleUpBtns(index);\n      this.handleDownBtns(index);\n    }\n  }\n\n  // finished ? dispatch delete task : prompt confirm modal\n  handleItemDelete(itemId, finshedStatus){\n    const { dispatchDelOneTask } = this.props;\n    if(finshedStatus){\n      dispatchDelOneTask(itemId);\n    }else{\n      // prompt Confirm modal\n      React.$modal.confirm(()=>{ // Ok clicked\n        dispatchDelOneTask(itemId);\n      }, ()=>{ // Cancel clicked\n        console.log(\"Clicked Cancel\");\n      }, \"Do you really want to delete unfinished task?\")\n    }\n  }\n\n  render() {\n    const {item, itemIndex, dispatchChangeTaskFinished, handleMoveEvent} = this.props;\n    const {showBtns, showUpBtns, showDownBtns} = this.state;\n    return (\n      <li className=\"task-item\"\n          // onFocus={() => this.handleShowBtn(true)}\n          // onBlur={() => this.handleShowBtn(false)}\n          onMouseOver={() => this.handleShowBtn(true, itemIndex)}\n          onMouseOut={() => this.handleShowBtn(false)}\n      >\n        <label htmlFor={\"item-check-box\"+item.id}>\n          <input\n            className=\"item-check-box\"\n            type=\"checkbox\"\n            name=\"item-check-box\"\n            id={\"item-check-box\"+item.id}\n            checked={item.finished}\n            onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n          <span>{item.title}</span>\n        </label>\n        <div className=\"button-group\">\n          <Button\n            value=\"Up\"\n            showBtn={showBtns && showUpBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, -1)}\n          />\n          <Button\n            value=\"Down\"\n            showBtn={showBtns && showDownBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, 1)}\n          />\n          <Button\n            value=\"Delete\"\n            showBtn={showBtns}\n            btnClass=\"delete-btn\"\n            onClickFunction={() => this.handleItemDelete(item.id, item.finished)}\n          />\n        </div>\n      </li>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\n\n// import components\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport { moveTask } from \"../store/actionCreators\";\n\n\n// List component\nfunction List(props) {\n  // get tasks from props;\n  const { tasks, dispatchSortItem } = props;\n  return (\n    <ul className=\"task-list\">\n        {tasks.map((task, index) => (\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\n        ))}\n    </ul>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSortItem(index, diff){\n      const action = moveTask(index, diff);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {useState, useEffect} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\nfunction TodoHeader(props) {\n  const [taskInput, setTaskInput] = useState('');\n  const [pageText, setPageText] = useState({});\n  const { locale } = props;\n\n  useEffect(()=>{\n    // after componentDidMount and componentDidUpdate, we need to get langData file and set page text\n    React.$lang.languageLoader().then((langData)=>{\n      setPageText(langData.default);\n    })\n  }, [locale])\n\n  function handleInputChange(e) {\n    setTaskInput(e.target.value);\n  }\n\n  // handle Enter key down event\n  function handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !! taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      const { dispatchAddOneTask } = props;\n      dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      setTaskInput('');\n    }\n  }\n\n  return (\n    <div className=\"tasks-header\">\n      <input className=\"task-input\"\n             type=\"text\"\n             placeholder={pageText.tasksInputPlaceholder}\n             value={taskInput}\n             onChange={(e) => handleInputChange(e)}\n             onKeyDown={(e) => handleKeyEvent(e)}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks,\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React, {Component} from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\nclass TodoFooter extends Component {\n  // calculate the count of finished tasks\n  _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  render() {\n    const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = this.props;\n    const finishedItems = this._calculateFinishedTasks(items);\n    const totalItems = items.length;\n    return (\n      <div className=\"tasks-footer\">\n        <label htmlFor=\"footer-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"footer-checkbox\"\n            checked={finishedItems === totalItems && totalItems > 0}\n            onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n          />\n          <span className=\"task-info\">Completed {finishedItems} {finishedItems===1?\"task\":\"tasks\"} / Total {totalItems===1?\"task\":\"tasks\"}: {totalItems}</span>\n        </label>\n        <input type=\"button\" className=\"btn\" value=\"Delete Completed Tasks\" onClick={() => dispatchDelFinishedTasks()}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/TodoHeader';\nimport Footer from '../components/TodoFooter';\nimport '../index.scss';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    return (\n      <div className='tasks-wrapper'>\n        <div className='tasks-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types'\n\n//import from antd icon\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons'\n\n\nfunction TextInput(props) {\n  // get props\n  const {inputTitle, inputType, className} = props;\n\n  // init state\n  // store input value\n  const [value, setValue] = useState(\"\")\n\n  // store initial props.inputType, the state input type can be set to \"text\"\n  const [type, setType] = useState(props.inputType)\n\n  // icon style object ready to use\n  const iconStyle = { fontSize: \"14px\",\n    position: \"absolute\",\n    right: \"0\",\n    height: \"30px\",\n    marginTop: \"8px\",\n    boxSizing: \"border-box\",\n    color: \"#ccc\",\n    minWidth: \"30px\"\n  }\n\n  // handle eye icon onClick event\n  function handleEyeSwitch(){\n    if(type === \"password\") {\n      setType(\"text\") // if current type === \"password\", then we switch it to \"text\"\n    } else {\n      setType(\"password\")\n    }\n  }\n\n  // prepare eyeIconDom, dynamic render based on input type\n  // if input type === password, we render eye invisible icon dom, else we render eye icon dom\n  const eyeIconDom = (\n    <a onClick={()=>{handleEyeSwitch()}}>\n      {type === \"password\" ? <EyeInvisibleOutlined style={iconStyle}/>: <EyeOutlined style={iconStyle} />}\n    </a>\n  )\n\n  // render\n  return (\n    <>\n      <label htmlFor={inputTitle}>{inputTitle}</label>\n      <div style={{position: \"relative\"}}>\n        <input\n          type={type}\n          className={\"text-input \" + (className ? className: \"\")}\n          id={inputTitle}\n          value={value}\n          style={{width: \"100%\"}}\n          onChange={(e) => {setValue(e.target.value)}}\n        />\n        {/*If props.inputType is password, we render this icon, if the type is text, we do not render any icon*/}\n        {inputType===\"password\" ? eyeIconDom : null}\n      </div>\n    </>\n  )\n}\n\n// specify Button component prop types\nTextInput.propTypes = {\n  inputTitle: PropTypes.string.isRequired,\n  inputType: PropTypes.string,\n  className: PropTypes.string\n}\n\nTextInput.defaultProps = {\n  inputType: \"text\"\n}\n\nexport default TextInput;","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// import component\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/input/TextInput\";\n\nfunction Register(props) {\n  // get props\n\n  // render virtual element\n  return (\n    <div className=\"register-wrapper\">\n      <div className=\"register-container\">\n        <div>\n          <h3>Sign Up</h3>\n        </div>\n        <form action=\"\" className=\"general-form\">\n          <TextInput inputTitle=\"Email\"/>\n          <TextInput inputTitle=\"Password\" inputType=\"password\"/>\n          <TextInput inputTitle=\"Confirm Password\" inputType=\"password\"/>\n          <Button showBtn={true} btnClass=\"sign-up-btn\" value=\"Sign Up\" onClickFunction={() => {alert(\"clicked\")}}/>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n// specify Button component prop types\nRegister.propTypes = {\n}\n\nexport default Register;","import React from 'react';\nimport { Layout } from 'antd'\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Home from \"../pages/Home\";\nimport Dashboard from \"../pages/Dashboard\";\nimport UserCenter from \"../pages/UserCenter\";\nimport Todos from \"../pages/Todos\";\nimport Register from \"../pages/Register\";\n\nfunction AppContent() {\n  const { Content } = Layout;\n  return (\n    <>\n      <Content className=\"app-content\">\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/usercenter\" component={UserCenter} />\n          <Route exact path=\"/tasks\" component={Todos} />\n          <Route exact path=\"/register\" component={Register} />\n        </Switch>\n      </Content>\n    </>\n  )\n}\nexport default AppContent;","//import react\nimport React from 'react';\n\n//import react-router-dom\nimport { HashRouter as Router } from \"react-router-dom\"\n\n// import from react redux\nimport {connect} from \"react-redux\";\n\n//import antd\nimport { Layout } from 'antd';\nimport { ConfigProvider } from \"antd\";\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport enUS from 'antd/lib/locale/en_US';\nimport zhCN from 'antd/lib/locale/zh_CN';\n\n//import page components\nimport AppFooter from './components/AppFooter';\nimport AppHeader from './components/AppHeader';\nimport AppContent from \"./components/AppContent\";\n\nmoment.locale('cn');\n// app file\nfunction App(props) {\n  const { locale } = props;\n  return (\n    <ConfigProvider locale={locale==='zh-cn'? zhCN : enUS}>\n      <Router>\n        <Layout>\n          <AppHeader />\n          <AppContent />\n          <AppFooter />\n        </Layout>\n      </Router>\n    </ConfigProvider>\n  )\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const APP_LANG = 'APP_LANG'\n\nclass Lang {\n  constructor() {\n    //init lang\n    this.userLanguage = '';\n\n    //in constructor, we need to get existing APP_LANG from localStorage\n    this.userLanguage = localStorage.getItem(APP_LANG);\n\n    // if there is no APP_LANG in localStorage, we set lang based on browser preference.\n    if(!this.userLanguage){\n      const userLang = window.navigator.language.toLowerCase() || 'en'; //get browser language preference\n      if(userLang === 'zh-cn') {\n        this.userLanguage = 'zh-cn'\n        localStorage.setItem(APP_LANG, this.userLanguage);\n      } else {\n        this.userLanguage = 'en'\n        localStorage.setItem(APP_LANG, this.userLanguage);\n      }\n    }\n  }\n\n  static getInstance(){\n    if(!this._instance){\n      this._instance = new Lang();\n    }\n    return this._instance\n  }\n\n  // set localStorage APP_LANG\n  setLang(language) {\n    this.userLanguage = language.toLowerCase();\n    localStorage.setItem(APP_LANG, this.userLanguage);\n  }\n\n  // when call this function, will dynamically import matching language JSON file.\n  languageLoader() {\n    switch (this.userLanguage.toLowerCase()) {\n      case 'zh-cn':\n        return import('../languages/zhcn.json');\n      case 'en-us':\n        return import('../languages/enus.json');\n      default:\n        return import('../languages/enus.json');\n    }\n  }\n}\n\n\n\nexport default Lang.getInstance();\n","// 1. import actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.1 import language instance\nimport lang from '../languages/lang';\n\n// 2. reducer: create default state\nconst defaultState = {\n  tasks: [],\n  locale: lang.userLanguage\n}\n\n// 3. reducer: core methods based on action type\nexport default function taskReducer(state=defaultState, action){\n  // 1.0 get all existing tasks from database\n  if(action.type === ADD_ALL_TASKS) {\n    // 1.1 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // 1.2 passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.add a new task\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.delete one task\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.change one task's finished status\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.change all tasks finished status (select all and de-select all)\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.clean all finished tasks\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    //6.2 set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n  //7. move task item up and down\n  if(action.type === MOVE_TASK) {\n    //7.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const index = action.index;\n    const diff = action.diff;\n\n    //7.1 handle item sorting\n    const item = tasks[index];\n    tasks.splice(index, 1);\n    tasks.splice(index + diff, 0, item);\n\n    //7.2 set state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //8. Change locale\n  if(action.type === CHANGE_LOCALE) {\n    // 8.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const localeValue = action.localeValue;\n\n    // 8.1 handle change locale\n    newState.locale = localeValue;\n\n    // 8.2 set state\n    return newState\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import { notification } from 'antd';\n\nclass AppNotification {\n    constructor(){\n        this.config = {}\n    }\n\n    _configNotice(message, description, duration){\n        this.config.message = message;\n        this.config.description = description;\n        this.config.duration = duration;\n    }\n\n    success(message=\"Notice\", description=\"Successfully operated\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.success(this.config)\n    }\n\n    info(message=\"Notice\", description=\"Infomation\", duration=3) {\n        this._configNotice(message, description, duration);\n        notification.info(this.config)\n    }\n\n    warning(message=\"Warning\", description=\"Warning message\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.warning(this.config)\n    }\n\n    error(message=\"Error\", description=\"Operation failed\", duration=5) {\n        this._configNotice(message, description, duration);\n        notification.error(this.config)\n    }\n}\n\nexport default new AppNotification();","import { Modal } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { confirm } = Modal;\n\nclass AppModal {\n    constructor(){\n        this.config = {\n            icon: <ExclamationCircleOutlined />\n        }\n    }\n\n    _configModal(onOk, onCancel, title, content){\n        this.config.onOk = onOk;\n        this.config.onCancel = onCancel;\n        this.config.title = title;\n        this.config.content = content;\n    }\n\n    confirm(onOK, onCancel, title=\"Do you want to delete this item?\", content=\"Click Yes or Cancel\") {\n        this._configModal(onOK, onCancel, title, content, );\n        confirm(this.config);\n    }\n}\n\nexport default new AppModal();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\nimport notice from '../src/utils/notification';\nimport modal from '../src/utils/modal';\nimport lang from '../src/languages/lang';\n\n// React.$notification = (message) => {\n//   console.log(message);\n//   notification.success({message: message});\n// }\n\n// bind notice class instance to React globally\nReact.$notice = notice;\n//bind modal class instance to React globally\nReact.$modal = modal;\n// bind lang class to React globally\nReact.$lang = lang;\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}