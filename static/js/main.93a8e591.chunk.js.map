{"version":3,"sources":["components/AppFooter.jsx","store/actionTypes.js","components/LangRadio.jsx","store/actionCreators.js","components/AppHeader.jsx","pages/Home.jsx","pages/Dashboard.jsx","pages/UserCenter.jsx","components/Button.jsx","components/Item.jsx","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","components/AppContent.jsx","App.js","reportWebVitals.js","store/reducers.js","store/index.js","index.js"],"names":["AppFooter","Footer","Layout","className","ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","CHANGE_LOCALE","connect","state","locale","dispatch","dispatchChangeLocale","localValue","action","type","localeValue","props","Group","value","enUS","onChange","e","target","moment","Button","zhCN","AppHeader","useState","current","setCurrent","Header","onClick","key","selectedKeys","mode","Item","icon","HomeOutlined","exact","activeClassName","to","DashboardOutlined","UserOutlined","pathname","search","hash","fromDashboard","link","userId","UnorderedListOutlined","Dashboard","React","Component","UserCenter","console","log","this","location","query","URLSearchParams","get","showBtn","onClickFunction","btnClass","style","display","showBtns","showUpBtns","showDownBtns","flag","setState","index","tasks","length","handleShowDelBtn","undefined","handleUpBtns","handleDownBtns","item","itemIndex","dispatchChangeTaskFinished","dispatchDelOneTask","handleMoveEvent","onMouseOver","handleShowBtn","onMouseOut","htmlFor","id","name","checked","finished","title","taskId","delOneTask","finishedStatus","changeOneFinished","dispatchSortItem","diff","moveTask","map","task","TodoHeader","taskInput","keyCode","trim","dispatchAddOneTask","placeholder","handleInputChange","onKeyDown","handleKeyEvent","addOneTask","TodoFooter","finishedTaskCount","forEach","items","dispatchIsAllFinished","dispatchDelFinishedTasks","finishedItems","_calculateFinishedTasks","totalItems","isAllFinished","Todos","dispatchData","status","data","AppContent","Content","path","component","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","newState","JSON","parse","stringify","push","splice","tempTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93a8e591.chunk.js","sourcesContent":["import React from 'react';\nimport {Layout} from 'antd'\n\nfunction AppFooter() {\n  const { Footer } = Layout;\n  return (\n    <>\n      <Footer className=\"app-footer\">\n        <div className=\"footer-info\">\n          <span><strong>Email:</strong> seanli9018@gmail.com; <strong>Phone:</strong> 312-825-9982</span>\n        </div>\n      </Footer>\n    </>\n  )\n}\nexport default AppFooter;","//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\n//7.move task item up and down\nexport const MOVE_TASK = 'move_task';\n//8. Change locale\nexport const CHANGE_LOCALE = 'change_locale';","import React from 'react';\n\n//import from antd\nimport {  Radio } from 'antd';\nimport enUS from 'antd/lib/locale/en_US';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport { changeLocale } from \"../store/actionCreators\";\n\n\nfunction LangRadio(props) {\n  const { locale, dispatchChangeLocale } = props;\n\n  let handleLocale = e => {\n    // get radio user selected value\n    const localeValue = e.target.value;\n\n    // set store locale state\n    dispatchChangeLocale(localeValue);\n\n    if (!localeValue) {\n      moment.locale('en');\n    } else {\n      moment.locale('zh-cn');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"change-locale\">\n        <Radio.Group value={!!locale ? locale : enUS} onChange={handleLocale}>\n          <Radio.Button key=\"en\" value={enUS}>\n            English\n          </Radio.Button>\n          <Radio.Button key=\"cn\" value={zhCN}>\n            中文\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n    </>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    locale: state.locale\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchChangeLocale(localValue){\n      const action = changeLocale(localValue);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(LangRadio);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}\n\n//7. move task item up and down\nexport const moveTask = (index, diff) => {\n  return{\n    type: MOVE_TASK,\n    index,\n    diff\n  }\n}\n\n//8. handle locale\nexport const changeLocale = (localeValue) => {\n  return {\n    type: CHANGE_LOCALE,\n    localeValue\n  }\n}","// import from react\nimport React, {useState} from 'react';\n\n// import from antd\nimport {Layout, Menu} from 'antd'\nimport {DashboardOutlined, HomeOutlined, UnorderedListOutlined, UserOutlined} from \"@ant-design/icons\";\n\n// import from react-router-dom\nimport {NavLink} from \"react-router-dom\";\n\n// import from components\nimport LangRadio from \"./LangRadio\";\n\nfunction AppHeader() {\n  const [current, setCurrent] = useState('home')\n  const { Header } = Layout;\n  let handleClick = e => {\n    setCurrent(e.key);\n  };\n  return (\n    <>\n      <Header className=\"app-header\">\n        <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n          {/*Route Navi*/}\n          <Menu.Item key=\"home\" icon={<HomeOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/\">Home</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"dashboard\" icon={<DashboardOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/dashboard\">Dashboard</NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"usercenter\" icon={<UserOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to={{\n              pathname: \"/usercenter\",\n              search: \"?name=sean&age=18\",\n              hash: \"#hashtag\",\n              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\n            }}>\n              User Center\n            </NavLink>\n          </Menu.Item>\n          <Menu.Item key=\"tasks\" icon={<UnorderedListOutlined />}>\n            <NavLink exact activeClassName=\"selected\" to=\"/tasks\">Tasks</NavLink>\n          </Menu.Item>\n        </Menu>\n        <LangRadio />\n      </Header>\n    </>\n  )\n}\nexport default AppHeader;","import React from 'react';\n\n//import from antd\nimport { DatePicker } from \"antd\";\n// import { ConfigProvider } from \"antd\";\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\nimport {connect} from \"react-redux\";\n// moment.locale('cn');\n\n function Home() {\n  return (\n    <div>\n      <DatePicker />\n    </div>\n  );\n}\nconst mapStateToProps = (state)=>{\n   return {\n     locale: state.locale\n   }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(Home);","import React from 'react';\n\nclass Dashboard extends React.Component {\n  render() {\n    return (\n      <div>\n        This is Dashboard page\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","import React from 'react';\n\nclass UserCenter extends React.Component {\n  render() {\n    console.log(this.props.location);\n\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"));\n    console.log(query.get(\"age\"));\n\n    return (\n      <div>\n        This is User Center page\n      </div>\n    );\n  }\n}\n\nexport default UserCenter;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\nclass Item extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired,\n    handleMoveEvent: PropTypes.func.isRequired,\n    itemIndex: PropTypes.number.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBtns: false,\n      showUpBtns: false,\n      showDownBtns: false\n    }\n  }\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  handleShowDelBtn(flag) {\n    this.setState({\n      showBtns: flag\n    })\n  }\n\n  //if index !== 0, then show up btn\n  handleUpBtns(index) {\n    if(index !== 0 ){\n      this.setState({\n        showUpBtns: true\n      })\n    }else{\n      this.setState({\n        showUpBtns: false\n      })\n    }\n  }\n\n  //if index !== last index, then show down btn\n  handleDownBtns(index) {\n    if(index !== this.props.tasks.length-1){\n      this.setState({\n        showDownBtns: true\n      })\n    }else{\n      this.setState({\n        showDownBtns: false\n      })\n    }\n  }\n\n  handleShowBtn(flag, index){\n    this.handleShowDelBtn(flag);\n    if(index !== undefined){\n      this.handleUpBtns(index);\n      this.handleDownBtns(index);\n    }\n  }\n\n  render() {\n    const {item, itemIndex, dispatchChangeTaskFinished, dispatchDelOneTask, handleMoveEvent} = this.props;\n    const {showBtns, showUpBtns, showDownBtns} = this.state;\n    return (\n      <li className=\"task-item\"\n          // onFocus={() => this.handleShowBtn(true)}\n          // onBlur={() => this.handleShowBtn(false)}\n          onMouseOver={() => this.handleShowBtn(true, itemIndex)}\n          onMouseOut={() => this.handleShowBtn(false)}\n      >\n        <label htmlFor={\"item-check-box\"+item.id}>\n          <input\n            className=\"item-check-box\"\n            type=\"checkbox\"\n            name=\"item-check-box\"\n            id={\"item-check-box\"+item.id}\n            checked={item.finished}\n            onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n          <span>{item.title}</span>\n        </label>\n        <div className=\"button-group\">\n          <Button\n            value=\"Up\"\n            showBtn={showBtns && showUpBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, -1)}\n          />\n          <Button\n            value=\"Down\"\n            showBtn={showBtns && showDownBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, 1)}\n          />\n          <Button\n            value=\"Delete\"\n            showBtn={showBtns}\n            btnClass=\"delete-btn\"\n            onClickFunction={() => dispatchDelOneTask(item.id)}\n          />\n        </div>\n      </li>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","import React from 'react';\n\n// import components\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport { moveTask } from \"../store/actionCreators\";\n\n\n// List component\nfunction List(props) {\n  // get tasks from props;\n  const { tasks, dispatchSortItem } = props;\n  return (\n    <ul className=\"task-list\">\n        {tasks.map((task, index) => (\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\n        ))}\n    </ul>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSortItem(index, diff){\n      const action = moveTask(index, diff);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {Component} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\nclass TodoHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: ''\n    }\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      taskInput: e.target.value\n    })\n  }\n\n  // handle Enter key down event\n  handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = this.props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !!this.state.taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: this.state.taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      this.props.dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      this.setState({\n        taskInput: ''\n      })\n    }\n  }\n\n  render() {\n    const {taskInput} = this.state;\n\n    return (\n      <div className=\"tasks-header\">\n        <input className=\"task-input\"\n               type=\"text\"\n               placeholder=\"Input the task you need to accomplish, then press enter key!\"\n               value={taskInput}\n               onChange={(e) => this.handleInputChange(e)}\n               onKeyDown={(e) => this.handleKeyEvent(e)}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React, {Component} from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\nclass TodoFooter extends Component {\n  // calculate the count of finished tasks\n  _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  render() {\n    const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = this.props;\n    const finishedItems = this._calculateFinishedTasks(items);\n    const totalItems = items.length;\n    return (\n      <div className=\"tasks-footer\">\n        <label htmlFor=\"footer-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"footer-checkbox\"\n            checked={finishedItems === totalItems && totalItems > 0}\n            onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n          />\n          <span className=\"task-info\">Completed {finishedItems} {finishedItems===1?\"task\":\"tasks\"} / Total {totalItems===1?\"task\":\"tasks\"}: {totalItems}</span>\n        </label>\n        <input type=\"button\" className=\"btn\" value=\"Delete Completed Tasks\" onClick={() => dispatchDelFinishedTasks()}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/TodoHeader';\nimport Footer from '../components/TodoFooter';\nimport '../index.scss';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    return (\n      <div className='tasks-wrapper'>\n        <div className='tasks-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React from 'react';\nimport { Layout } from 'antd'\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Home from \"../pages/Home\";\nimport Dashboard from \"../pages/Dashboard\";\nimport UserCenter from \"../pages/UserCenter\";\nimport Todos from \"../pages/Todos\";\n\nfunction AppContent() {\n  const { Content } = Layout;\n  return (\n    <>\n      <Content className=\"app-content\">\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/usercenter\" component={UserCenter} />\n          <Route exact path=\"/tasks\" component={Todos} />\n        </Switch>\n      </Content>\n    </>\n  )\n}\nexport default AppContent;","//import react\nimport React from 'react';\n\n//import react-router-dom\nimport { HashRouter as Router } from \"react-router-dom\"\n\n// import from react redux\nimport {connect} from \"react-redux\";\n\n//import antd\nimport { Layout } from 'antd';\nimport { ConfigProvider } from \"antd\";\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\n//import page components\nimport AppFooter from './components/AppFooter';\nimport AppHeader from './components/AppHeader';\nimport AppContent from \"./components/AppContent\";\n\nmoment.locale('cn');\n\nfunction App(props) {\n  const { locale } = props;\n  return (\n    <ConfigProvider locale={locale}>\n      <Router>\n        <Layout>\n          <AppHeader />\n          <AppContent />\n          <AppFooter />\n        </Layout>\n      </Router>\n    </ConfigProvider>\n  )\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    locale: state.locale\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// 1. import actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK,\n  CHANGE_LOCALE\n} from \"./actionTypes\";\n\n// 2. reducer: create default state\nconst defaultState = {\n  tasks: [],\n  locale: null\n}\n\n// 3. reducer: core methods based on action type\nexport default function taskReducer(state=defaultState, action){\n  // 1.0 get all existing tasks from database\n  if(action.type === ADD_ALL_TASKS) {\n    // 1.1 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // 1.2 passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.add a new task\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.delete one task\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.change one task's finished status\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.change all tasks finished status (select all and de-select all)\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.clean all finished tasks\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    //6.2 set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n  //7. move task item up and down\n  if(action.type === MOVE_TASK) {\n    //7.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const index = action.index;\n    const diff = action.diff;\n\n    //7.1 handle item sorting\n    const item = tasks[index];\n    tasks.splice(index, 1);\n    tasks.splice(index + diff, 0, item);\n\n    //7.2 set state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //8. Change locale\n  if(action.type === CHANGE_LOCALE) {\n    // 8.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const localeValue = action.localeValue;\n\n    // 8.1 handle change locale\n    newState.locale = localeValue;\n\n    // 8.2 set state\n    return newState\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}