{"version":3,"sources":["store/actionTypes.js","components/Button.jsx","components/Item.jsx","store/actionCreators.js","components/List.jsx","components/TodoHeader.jsx","components/TodoFooter.jsx","pages/Todos.jsx","pages/Home.jsx","components/Other.jsx","pages/Mine.jsx","pages/UserCenter.jsx","App.js","reportWebVitals.js","store/reducers.js","store/index.js","index.js"],"names":["ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","MOVE_TASK","Button","props","showBtn","value","onClickFunction","btnClass","type","className","style","display","onClick","Item","state","showBtns","showUpBtns","showDownBtns","flag","this","setState","index","tasks","length","handleShowDelBtn","undefined","handleUpBtns","handleDownBtns","item","itemIndex","dispatchChangeTaskFinished","dispatchDelOneTask","handleMoveEvent","onMouseOver","handleShowBtn","onMouseOut","htmlFor","id","name","checked","finished","onChange","title","Component","connect","dispatch","taskId","action","delOneTask","finishedStatus","changeOneFinished","dispatchSortItem","diff","moveTask","map","task","TodoHeader","taskInput","e","target","keyCode","trim","dispatchAddOneTask","placeholder","handleInputChange","onKeyDown","handleKeyEvent","addOneTask","TodoFooter","finishedTaskCount","forEach","items","dispatchIsAllFinished","dispatchDelFinishedTasks","finishedItems","_calculateFinishedTasks","totalItems","isAllFinished","Todos","dispatchData","status","React","data","Home","Other","history","push","handleOnClick","to","withRouter","Mine","query","URLSearchParams","location","search","console","log","get","UserCenter","App","exact","activeClassName","pathname","hash","fromDashboard","link","userId","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","newState","JSON","parse","stringify","splice","tempTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad34603.chunk.js","sourcesContent":["//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';\n//7.move task item up and down\nexport const MOVE_TASK = 'move_task';","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\nclass Item extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired,\n    handleMoveEvent: PropTypes.func.isRequired,\n    itemIndex: PropTypes.number.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBtns: false,\n      showUpBtns: false,\n      showDownBtns: false\n    }\n  }\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  handleShowDelBtn(flag) {\n    this.setState({\n      showBtns: flag\n    })\n  }\n\n  //if index !== 0, then show up btn\n  handleUpBtns(index) {\n    if(index !== 0 ){\n      this.setState({\n        showUpBtns: true\n      })\n    }else{\n      this.setState({\n        showUpBtns: false\n      })\n    }\n  }\n\n  //if index !== last index, then show down btn\n  handleDownBtns(index) {\n    if(index !== this.props.tasks.length-1){\n      this.setState({\n        showDownBtns: true\n      })\n    }else{\n      this.setState({\n        showDownBtns: false\n      })\n    }\n  }\n\n  handleShowBtn(flag, index){\n    this.handleShowDelBtn(flag);\n    if(index !== undefined){\n      this.handleUpBtns(index);\n      this.handleDownBtns(index);\n    }\n  }\n\n  render() {\n    const {item, itemIndex, dispatchChangeTaskFinished, dispatchDelOneTask, handleMoveEvent} = this.props;\n    const {showBtns, showUpBtns, showDownBtns} = this.state;\n    return (\n      <li className=\"task-item\"\n          // onFocus={() => this.handleShowBtn(true)}\n          // onBlur={() => this.handleShowBtn(false)}\n          onMouseOver={() => this.handleShowBtn(true, itemIndex)}\n          onMouseOut={() => this.handleShowBtn(false)}\n      >\n        <label htmlFor={\"item-check-box\"+item.id}>\n          <input\n            className=\"item-check-box\"\n            type=\"checkbox\"\n            name=\"item-check-box\"\n            id={\"item-check-box\"+item.id}\n            checked={item.finished}\n            onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n          <span>{item.title}</span>\n        </label>\n        <div className=\"button-group\">\n          <Button\n            value=\"Up\"\n            showBtn={showBtns && showUpBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, -1)}\n          />\n          <Button\n            value=\"Down\"\n            showBtn={showBtns && showDownBtns}\n            onClickFunction={() => handleMoveEvent(itemIndex, 1)}\n          />\n          <Button\n            value=\"Delete\"\n            showBtn={showBtns}\n            btnClass=\"delete-btn\"\n            onClickFunction={() => dispatchDelOneTask(item.id)}\n          />\n        </div>\n      </li>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}\n\n//7. move task item up and down\nexport const moveTask = (index, diff) => {\n  return{\n    type: MOVE_TASK,\n    index,\n    diff\n  }\n}","import React from 'react';\n\n// import components\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport { moveTask } from \"../store/actionCreators\";\n\n\n// List component\nfunction List(props) {\n  // get tasks from props;\n  const { tasks, dispatchSortItem } = props;\n  return (\n    <ul className=\"task-list\">\n        {tasks.map((task, index) => (\n          <Item item={task} itemIndex={index} key={task.id} handleMoveEvent={(index, diff) => dispatchSortItem(index, diff)}/>\n        ))}\n    </ul>\n  )\n}\n\n// get redux state and passing it to component props\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchSortItem(index, diff){\n      const action = moveTask(index, diff);\n      dispatch(action);\n    }\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, {Component} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\nclass TodoHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: ''\n    }\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      taskInput: e.target.value\n    })\n  }\n\n  // handle Enter key down event\n  handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = this.props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !!this.state.taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: this.state.taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      this.props.dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      this.setState({\n        taskInput: ''\n      })\n    }\n  }\n\n  render() {\n    const {taskInput} = this.state;\n\n    return (\n      <div className=\"tasks-header\">\n        <input className=\"task-input\"\n               type=\"text\"\n               placeholder=\"Input the task you need to accomplish, then press enter key!\"\n               value={taskInput}\n               onChange={(e) => this.handleInputChange(e)}\n               onKeyDown={(e) => this.handleKeyEvent(e)}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoHeader)","import React, {Component} from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\nclass TodoFooter extends Component {\n  // calculate the count of finished tasks\n  _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  render() {\n    const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = this.props;\n    const finishedItems = this._calculateFinishedTasks(items);\n    const totalItems = items.length;\n    return (\n      <div className=\"tasks-footer\">\n        <label htmlFor=\"footer-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"footer-checkbox\"\n            checked={finishedItems === totalItems && totalItems > 0}\n            onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n          />\n          <span className=\"task-info\">Completed {finishedItems} {finishedItems===1?\"task\":\"tasks\"} / Total {totalItems===1?\"task\":\"tasks\"}: {totalItems}</span>\n        </label>\n        <input type=\"button\" className=\"btn\" value=\"Delete Completed Tasks\" onClick={() => dispatchDelFinishedTasks()}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/TodoHeader';\nimport Footer from '../components/TodoFooter';\nimport '../index.scss';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    return (\n      <div className='tasks-wrapper'>\n        <div className='tasks-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React from 'react';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        This is Home Page\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { NavLink, withRouter } from \"react-router-dom\";\n\n\nclass Other extends React.Component {\n  handleOnClick() {\n    // console.log(this.props);\n    this.props.history.push(\"/mine/todos\");\n  }\n  render() {\n    // console.log(this.props);\n    return (\n      <div>\n        <input type=\"button\" value=\"点我跳转到个人任务页面\" onClick={()=>this.handleOnClick()}/>\n        <span><NavLink to=\"/mine/todos\">点我</NavLink></span>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Other);","import React from 'react';\nimport Other from '../components/Other'\n\nclass Mine extends React.Component {\n  render() {\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"))\n    console.log(query.get(\"age\"))\n\n    return (\n      <div>\n        This is User Page\n        <Other />\n      </div>\n    );\n  }\n}\n\nexport default Mine;","import React from 'react';\n\nclass UserCenter extends React.Component {\n  render() {\n    console.log(this.props.location);\n\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"));\n    console.log(query.get(\"age\"));\n\n    return (\n      <div>\n        This is User Center (a sub - page of User page)\n      </div>\n    );\n  }\n}\n\nexport default UserCenter;","//import react\nimport React from 'react';\n//import antd\nimport { Button } from 'antd';\n\n\n//import page components\nimport Todos from \"./pages/Todos\";\nimport Home from \"./pages/Home\";\nimport Mine from \"./pages/Mine\";\nimport UserCenter from \"./pages/UserCenter\";\n\n//import react-router-dom\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\"\nclass App extends React.Component {\n  render() {\n    return (\n    <div>\n      <Router>\n        {/*Route Navi*/}\n        <ul>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/\">首页</NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/mine?name=sean&age=18\">我的页面</NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to={{\n                                                              pathname: \"/mine/usercenter\",\n                                                              search: \"?name=sean&age=18\",\n                                                              hash: \"#hashtag\",\n                                                              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\n                                                            }}>\n            个人中心\n          </NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/mine/todos\">个人任务</NavLink></li>\n        </ul>\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/mine\" component={Mine} />\n          <Route exact path=\"/mine/usercenter\" component={UserCenter} />\n          <Route exact path=\"/mine/todos\" component={Todos} />\n        </Switch>\n      </Router>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// 1. import actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS,\n  MOVE_TASK\n} from \"./actionTypes\";\n\n// 2. reducer: create default state\nconst defaultState = {\n  tasks: []\n}\n\n// 3. reducer: core methods based on action type\nexport default function taskReducer(state=defaultState, action){\n  // 1.0 get all existing tasks from database\n  if(action.type === ADD_ALL_TASKS) {\n    // 1.1 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // 1.2 passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.add a new task\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.delete one task\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.change one task's finished status\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.change all tasks finished status (select all and de-select all)\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.clean all finished tasks\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    //6.2 set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n\n  //7. move task item up and down\n  if(action.type === MOVE_TASK) {\n    //7.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const index = action.index;\n    const diff = action.diff;\n\n    //7.1 handle item sorting\n    const item = tasks[index];\n    tasks.splice(index, 1);\n    tasks.splice(index + diff, 0, item);\n\n    //7.2 set state\n    newState.tasks = tasks;\n    return newState;\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}