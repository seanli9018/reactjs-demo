{"version":3,"sources":["store/actionTypes.js","components/Button.jsx","components/Item.jsx","store/actionCreators.js","components/List.jsx","components/Header.jsx","components/Footer.jsx","pages/Todos.jsx","pages/Home.jsx","components/Other.jsx","pages/Mine.jsx","pages/UserCenter.jsx","App.js","reportWebVitals.js","store/reducers.js","store/index.js","index.js"],"names":["ADD_ALL_TASKS","ADD_ONE_TASK","DEL_ONE_TASK","CHANGE_ONE_FINISHED","IS_ALL_FINISHED","DEL_FINISHED_TASKS","Button","props","showBtn","value","onClickFunction","btnClass","type","className","style","display","onClick","Item","state","showBtns","flag","this","setState","item","dispatchChangeTaskFinished","dispatchDelOneTask","onMouseOver","handleShowBtn","onMouseOut","htmlFor","id","name","checked","finished","onChange","title","alert","Component","connect","tasks","dispatch","taskId","action","delOneTask","finishedStatus","changeOneFinished","List","map","task","Header","taskInput","e","target","keyCode","length","trim","dispatchAddOneTask","placeholder","handleInputChange","onKeyDown","handleKeyEvent","addOneTask","Footer","finishedTaskCount","forEach","items","dispatchIsAllFinished","dispatchDelFinishedTasks","finishedItems","_calculateFinishedTasks","totalItems","isAllFinished","Todos","dispatchData","status","React","data","Home","Other","history","push","handleOnClick","to","withRouter","Mine","query","URLSearchParams","location","search","console","log","get","UserCenter","App","exact","activeClassName","pathname","hash","fromDashboard","link","userId","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","newState","JSON","parse","stringify","index","splice","tempTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f031304.chunk.js","sourcesContent":["//1.添加所有的已经存在的任务\nexport const ADD_ALL_TASKS = 'add_all_tasks';\n//2.添加一条任务\nexport const ADD_ONE_TASK = 'add_one_task';\n//3.删除一条任务\nexport const DEL_ONE_TASK = 'del_one_task';\n//4.修改一条任务的完成状态\nexport const CHANGE_ONE_FINISHED = 'change_one_finished';\n//5.修改所有任务的完成状态（全选或全不选）\nexport const IS_ALL_FINISHED = 'is_all_finished';\n//6.清除所有已完成的任务\nexport const DEL_FINISHED_TASKS = 'del_finished_tasks';","import React from 'react';\nimport PropTypes from 'prop-types'\n\nfunction Button(props) {\n  // get props\n  const { showBtn, value, onClickFunction, btnClass }= props;\n\n  // render virtual element\n  return (\n    <>\n      <input\n        type=\"button\"\n        className={\"btn \" + (btnClass ? btnClass : \"\")}\n        value={value}\n        style={{display: showBtn ? \"block\" : \"none\"}}\n        onClick={() => onClickFunction()}\n      />\n    </>\n  )\n}\n\n// specify Button component prop types\nButton.propTypes = {\n  showBtn: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  btnClass: PropTypes.string,\n  onClickFunction: PropTypes.func.isRequired\n}\n\nexport default Button;","// React imports\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types'\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {changeOneFinished, delOneTask} from \"../store/actionCreators\";\n\n// components imports\nimport Button from './Button';\n\nclass Item extends Component {\n  static propTypes = {\n    item: PropTypes.object.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBtns: false\n    }\n  }\n\n  //flag is a boolean, flag = onMouseOver ? true : false\n  handleShowBtn(flag) {\n    this.setState({\n      showBtns: flag\n    })\n  }\n\n  render() {\n    const {item, dispatchChangeTaskFinished, dispatchDelOneTask} = this.props;\n    const {showBtns} = this.state;\n    return (\n      <li className=\"task-item\"\n          // onFocus={() => this.handleShowBtn(true)}\n          // onBlur={() => this.handleShowBtn(false)}\n          onMouseOver={() => this.handleShowBtn(true)}\n          onMouseOut={() => this.handleShowBtn(false)}\n      >\n        <label htmlFor={\"item-check-box\"+item.id}>\n          <input\n            className=\"item-check-box\"\n            type=\"checkbox\"\n            name=\"item-check-box\"\n            id={\"item-check-box\"+item.id}\n            checked={item.finished}\n            onChange={() => dispatchChangeTaskFinished(item.id, !item.finished)}/>\n          <span>{item.title}</span>\n        </label>\n        <div className=\"button-group\">\n          <Button\n            value=\"Up\"\n            showBtn={showBtns}\n            onClickFunction={() => alert(\"Clicked\")}\n          />\n          <Button\n            value=\"Down\"\n            showBtn={showBtns}\n            onClickFunction={() => alert(\"Clicked\")}\n          />\n          <Button\n            value=\"Delete\"\n            showBtn={showBtns}\n            btnClass=\"delete-btn\"\n            onClickFunction={() => dispatchDelOneTask(item.id)}\n          />\n        </div>\n      </li>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelOneTask(taskId) {\n      // get action object ready\n      const action = delOneTask(taskId);\n      dispatch(action);\n    },\n    dispatchChangeTaskFinished(taskId, finishedStatus) {\n      // get action object ready\n      const action = changeOneFinished(taskId, finishedStatus);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Item);","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS\n} from \"./actionTypes\";\n\n//1.添加所有的已经存在的任务\nexport const addAllTasks = (tasks)=>{\n  return {\n    type: ADD_ALL_TASKS,\n    tasks\n  }\n}\n//2.添加一条任务\nexport const addOneTask = (task)=>{\n  return {\n    type: ADD_ONE_TASK,\n    task\n  }\n}\n//3.删除一条任务\nexport const delOneTask = (taskId)=>{\n  return {\n    type: DEL_ONE_TASK,\n    taskId\n  }\n}\n//4.修改一条任务的完成状态\nexport const changeOneFinished = (taskId, finishedStatus)=>{\n  return {\n    type: CHANGE_ONE_FINISHED,\n    taskId,\n    finishedStatus\n  }\n}\n//5.修改所有任务的完成状态（全选或全部选）\nexport const isAllFinished = (flag)=>{\n  return {\n    type: IS_ALL_FINISHED,\n    flag\n  }\n}\n//6.清除所有已完成的任务\nexport const delFinishedTasks = ()=>{\n  return {\n    type: DEL_FINISHED_TASKS,\n  }\n}","import React, {Component} from 'react';\nimport Item from './Item';\n\n// react-redux imports\nimport { connect } from 'react-redux';\n\nclass List extends Component {\n  render() {\n    // get tasks from props;\n    const { tasks } = this.props;\n    return (\n      <ul className=\"task-list\">\n        {\n          tasks.map((task) => (\n            <Item item={task} key={task.id}/>\n          ))\n        }\n      </ul>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks\n  }\n}\n\n// export List component\nexport default connect(mapStateToProps, null)(List);","import React, {Component} from 'react';\n\n//import react-redux\nimport { connect } from 'react-redux';\nimport { addOneTask } from '../store/actionCreators';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: ''\n    }\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      taskInput: e.target.value\n    })\n  }\n\n  // handle Enter key down event\n  handleKeyEvent(e) {\n    // 0. initial and get all tasks data\n    const { tasks } = this.props;\n\n    // 1. handle key down event; dispatch input data to store state\n    if(e.keyCode === 13 && !!this.state.taskInput) {\n      // calculate last task's id based on store state length\n      const lastItemId = tasks.length === 0 ? 1 : tasks[tasks.length - 1].id\n\n      // organize the newly created task object\n      const item = {\n        id: lastItemId + 1,\n        title: this.state.taskInput.trim(),\n        finished: false\n      }\n\n      // dispatch new tasks and set store state\n      this.props.dispatchAddOneTask(item);\n\n      // clear header input, after successfully add input value\n      this.setState({\n        taskInput: ''\n      })\n    }\n  }\n\n  render() {\n    const {taskInput} = this.state;\n\n    return (\n      <div className=\"app-header\">\n        <input className=\"task-input\"\n               type=\"text\"\n               placeholder=\"Please input the task you need to accomplish today, and press enter key!\"\n               value={taskInput}\n               onChange={(e) => this.handleInputChange(e)}\n               onKeyDown={(e) => this.handleKeyEvent(e)}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  // return newly matched store state to component props\n  return {\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  // return newly matched store dispatch to component props\n  return {\n    dispatchAddOneTask(task) {\n      // get action object\n      const action = addOneTask(task);\n      // dispatch to reducer to update store state\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)","import React, {Component} from 'react';\n\n// react-redux imports\nimport { connect } from 'react-redux';\nimport {isAllFinished, delFinishedTasks} from \"../store/actionCreators\";\n\nclass Footer extends Component {\n  // calculate the count of finished tasks\n  _calculateFinishedTasks(tasks) {\n    let finishedTaskCount = 0;\n\n    tasks.forEach((task) => {\n      if (task.finished === true) {\n        finishedTaskCount += 1;\n      }\n    })\n    return finishedTaskCount\n  }\n\n  render() {\n    const {items, dispatchIsAllFinished, dispatchDelFinishedTasks} = this.props;\n    const finishedItems = this._calculateFinishedTasks(items);\n    const totalItems = items.length;\n    return (\n      <div className=\"app-footer\">\n        <label htmlFor=\"footer-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"footer-checkbox\"\n            checked={finishedItems === totalItems && totalItems > 0}\n            onChange={() => dispatchIsAllFinished(finishedItems !== totalItems)} // if it is not all-selected, then flag === true\n          />\n          <span className=\"task-info\">已完成{finishedItems}件 / 总计{totalItems}件</span>\n        </label>\n        <input type=\"button\" className=\"task-btn\" value=\"清除已完成任务\" onClick={() => dispatchDelFinishedTasks()}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.tasks\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchDelFinishedTasks() {\n      // get action object ready\n      const action = delFinishedTasks();\n      dispatch(action);\n    },\n    dispatchIsAllFinished(flag) {\n      // get action object ready\n      const action = isAllFinished(flag);\n      dispatch(action);\n    }\n  }\n}\n\n// export Item component\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React from 'react';\n\n// Import components\nimport List from '../components/List';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport '../index.css';\n\n// Import redux and react-redux\nimport { connect } from 'react-redux';\nimport {addAllTasks} from '../store/actionCreators';\n\nclass Todos extends React.Component {\n  // Did Mount, get data\n  componentDidMount() {\n    const data = {\n      status: 200,\n      tasks: [\n        {id: 1, title: \"Learn react for 2 hours\", finished: false},\n        {id: 2, title: \"Learn node for 2 hours\", finished: true},\n        {id: 3, title: \"Learn vue js for 2 hours\", finished: false},\n        {id: 4, title: \"Play xbox one for 1 hour\", finished: false}\n      ]\n    }\n\n    //dispatch data to store\n    this.props.dispatchData(data);\n  }\n\n  render() {\n    const {tasks} = this.props;\n    return (\n      <div className='app-wrapper'>\n        <div className='app-container'>\n          {/*Header Part - Task Input Box*/}\n          <Header />\n\n          {/*List Part - Task List*/}\n          <List />\n          {/*Below also works in the create-react-app, you don't have to use arrow func or bind this*/}\n          {/*<List tasksArr={tasks} handleCheckBoxChange={this.handleTasksFinish}/>*/}\n\n          {/*Footer Part - Task Control and Delete Btn*/}\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // return newly matched store dispatch to component props\n    dispatchData(data){\n      // get action\n      let action = addAllTasks(data.tasks);\n      // dispatch action to reducer to save data as new state\n      dispatch(action);\n    }\n  }\n}\n\n// export default App;\nexport default connect(null, mapDispatchToProps)(Todos);\n","import React from 'react';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        This is Home Page\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { NavLink, withRouter } from \"react-router-dom\";\n\n\nclass Other extends React.Component {\n  handleOnClick() {\n    // console.log(this.props);\n    this.props.history.push(\"/mine/todos\");\n  }\n  render() {\n    // console.log(this.props);\n    return (\n      <div>\n        <input type=\"button\" value=\"点我跳转到个人任务页面\" onClick={()=>this.handleOnClick()}/>\n        <span><NavLink to=\"/mine/todos\">点我</NavLink></span>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Other);","import React from 'react';\nimport Other from '../components/Other'\n\nclass Mine extends React.Component {\n  render() {\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"))\n    console.log(query.get(\"age\"))\n\n    return (\n      <div>\n        This is User Page\n        <Other />\n      </div>\n    );\n  }\n}\n\nexport default Mine;","import React from 'react';\n\nclass UserCenter extends React.Component {\n  render() {\n    console.log(this.props.location);\n\n    const query = new URLSearchParams(this.props.location.search);\n    console.log(query.get(\"name\"));\n    console.log(query.get(\"age\"));\n\n    return (\n      <div>\n        This is User Center (a sub - page of User page)\n      </div>\n    );\n  }\n}\n\nexport default UserCenter;","//import react\nimport React from 'react';\n\n//import page components\nimport Todos from \"./pages/Todos\";\nimport Home from \"./pages/Home\";\nimport Mine from \"./pages/Mine\";\nimport UserCenter from \"./pages/UserCenter\";\n\n//import react-router-dom\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\"\nclass App extends React.Component {\n  render() {\n    return (\n    <div>\n      <Router>\n        {/*Route Navi*/}\n        <ul>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/\">首页</NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/mine?name=sean&age=18\">我的页面</NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to={{\n                                                              pathname: \"/mine/usercenter\",\n                                                              search: \"?name=sean&age=18\",\n                                                              hash: \"#hashtag\",\n                                                              state: {fromDashboard: true, link: 'google.com', userId: 'xxjsdf834'}\n                                                            }}>\n            个人中心\n          </NavLink></li>\n          <li><NavLink exact activeClassName=\"selected\" to=\"/mine/todos\">个人任务</NavLink></li>\n        </ul>\n        {/*Route View/output */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/mine\" component={Mine} />\n          <Route exact path=\"/mine/usercenter\" component={UserCenter} />\n          <Route exact path=\"/mine/todos\" component={Todos} />\n        </Switch>\n      </Router>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// 导入actionTypes\nimport {\n  ADD_ALL_TASKS,\n  ADD_ONE_TASK,\n  DEL_ONE_TASK,\n  CHANGE_ONE_FINISHED,\n  IS_ALL_FINISHED,\n  DEL_FINISHED_TASKS\n} from \"./actionTypes\";\n\n// reducer 建立默认状态 state\nconst defaultState = {\n  tasks: []\n}\n\n// reducer 方法实现\nexport default function taskReducer(state=defaultState, action){\n  //1.添加所有的已经存在的任务\n  if(action.type === ADD_ALL_TASKS) {\n    // clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    // passing actions data to the newState\n    newState.tasks = action.tasks;\n    return newState;\n  }\n  //2.添加一条任务\n  if(action.type === ADD_ONE_TASK) {\n    //2.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const task = action.task\n    //2.1 push actions task data to the newState\n    tasks.push(task);\n    //2.2 set new state\n    return newState;\n  }\n  //3.删除一条任务\n  if(action.type === DEL_ONE_TASK) {\n    //3.0. clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const taskId = action.taskId;\n    const tasks = newState.tasks;\n    //3.1. use map loop, match task ID and return a new tempTasks array\n    tasks.forEach((task, index) => {\n      if(task.id === taskId) {\n        tasks.splice(index, 1);\n      }\n    })\n    //3.2. Assign new tasks array to newState\n    newState.tasks = tasks;\n    return newState;\n  }\n  //4.修改一条任务的完成状态\n  if(action.type === CHANGE_ONE_FINISHED) {\n    //4.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const taskId = action.taskId;\n    const finishedStatus = action.finishedStatus;\n\n    //4.1. use loop match the task item and change it's finished status\n    tasks.forEach((task) => {\n      if(task.id === taskId) {\n        task.finished = finishedStatus;\n      }\n    })\n\n    //4.2. Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //5.修改所有任务的完成状态（全选或全部选）\n  if(action.type === IS_ALL_FINISHED) {\n    //5.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const flag = action.flag;\n\n    //5.1 According to flag, select/de-select all tasks\n    tasks.forEach((task) => {\n      if(flag){\n        task.finished = true;\n      } else {\n        task.finished = false;\n      }\n    })\n\n    //5.2 Assign new tempTasks array to new state\n    newState.tasks = tasks;\n    return newState;\n  }\n  //6.清除所有已完成的任务\n  if(action.type === DEL_FINISHED_TASKS) {\n    //6.0 clone current state\n    const newState = JSON.parse(JSON.stringify(state));\n    const tasks = newState.tasks;\n    const tempTasks = [];\n\n    //6.1 push all unfinished task to new Array\n    tasks.forEach((task) => {\n      if(!task.finished){\n        tempTasks.push(task);\n      }\n    })\n\n    // set State and re-rendering\n    newState.tasks = tempTasks;\n    return newState;\n  }\n  return state;\n}\n\n\n","import { createStore }  from 'redux';\nimport reducers from './reducers'\n\nconst store = createStore(reducers);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import Redux react-redux;\nimport { Provider } from 'react-redux';\nimport store from '../src/store/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}